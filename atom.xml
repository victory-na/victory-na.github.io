<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>中系少女豆瓣酱</title>
  
  <subtitle>[object Object]</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-23T02:55:10.864Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>中系少女豆瓣酱</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于vue和element-ui的tree联动玩法</title>
    <link href="http://example.com/2023/05/23/%E5%9F%BA%E4%BA%8Evue%E5%92%8Celement-ui%E7%9A%84tree%E8%81%94%E5%8A%A8%E7%8E%A9%E6%B3%95/"/>
    <id>http://example.com/2023/05/23/%E5%9F%BA%E4%BA%8Evue%E5%92%8Celement-ui%E7%9A%84tree%E8%81%94%E5%8A%A8%E7%8E%A9%E6%B3%95/</id>
    <published>2023-05-23T11:25:56.000Z</published>
    <updated>2023-05-23T02:55:10.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于vue和element-ui的tree联动玩法"><a href="#基于vue和element-ui的tree联动玩法" class="headerlink" title="基于vue和element-ui的tree联动玩法"></a><strong>基于vue和element-ui的tree联动玩法</strong></h1><blockquote><p>element-ui组件tree树形控件需求</p><ul><li>可选择，进行多选</li><li>树形控件图标定制化</li><li>树形控件数据搜索过滤</li><li>选择后的数据在右侧联动添加删除</li></ul></blockquote><h2 id="一、element-ui-Tree树形控件"><a href="#一、element-ui-Tree树形控件" class="headerlink" title="一、element-ui Tree树形控件"></a>一、element-ui Tree树形控件</h2><h3 id="1、基础多选用法"><a href="#1、基础多选用法" class="headerlink" title="1、基础多选用法"></a>1、基础多选用法</h3><p>element-ui里面的Tree树形控件提供了多选的api：<code>show-checkbox</code>.，点击的时候提供了对应的method：<code>check-change</code></p><p><img src="https://i.postimg.cc/xC3pMF86/image-20230523092914705.png" alt="image-20230523092914705"></p><h3 id="2、修改样式"><a href="#2、修改样式" class="headerlink" title="2、修改样式"></a>2、修改样式</h3><p>对树形控件的样式进行修改，修改需求如下</p><ul><li>第一层级不可选择</li><li>第一层级定制图标</li><li>层级下拉图标定制</li></ul><h4 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let data = JSON.parse(JSON.stringify(this.treeData))//将Tree数据深拷贝</span><br><span class="line">this.treeData = []</span><br><span class="line">data.map(item =&gt; &#123;</span><br><span class="line">    item.disabled = true//给数据第一层级加上disabled属性</span><br><span class="line">    this.treeData.push(item)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="html部分"><a href="#html部分" class="headerlink" title="html部分"></a>html部分</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-tree :data=&quot;treeData&quot; show-checkbox node-key=&quot;id&quot; :props=&quot;props&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template #default=&quot;&#123; node &#125;&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;custom-tree-node&quot;&gt;</span><br><span class="line">        &lt;!-- 第一级固定一个图标 --&gt;</span><br><span class="line">            &lt;img </span><br><span class="line">                 :src=&quot;require(&#x27;../assets/iconImg/wjj.png&#x27;)&quot;//引入图片</span><br><span class="line">                 style=&quot;margin-right: 5px;&quot; </span><br><span class="line">                 v-if=&quot;node.level === 1&quot; class=&quot;icon&quot; /&gt;//判断是不是第一层级</span><br><span class="line">            &lt;span </span><br><span class="line">                  :class=&quot;[node.childNodes.length ? &#x27;bold&#x27; : &#x27;&#x27;,</span><br><span class="line">                          node.expanded || node.checked ? &#x27;isCurrent&#x27; : &#x27;&#x27;]&quot;&gt;</span><br><span class="line">                &#123;&#123;node.label &#125;&#125;//给选择的节点添加class</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/el-tree&gt;</span><br></pre></td></tr></table></figure><h4 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">.isCurrent &#123;//选择的节点颜色样式</span><br><span class="line">    color: rgba(0, 130, 255, 1);</span><br><span class="line">  &#125;</span><br><span class="line">//对Tree组件内部样式修改</span><br><span class="line">  :deep().el-tree &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line"></span><br><span class="line">  //原有的箭头 去掉</span><br><span class="line">  .el-icon svg &#123;</span><br><span class="line">      display: none;</span><br><span class="line">     height: 0;</span><br><span class="line">     width: 0;</span><br><span class="line">    &#125;</span><br><span class="line">     //第一层级的checkbox选择框去掉</span><br><span class="line">   .el-checkbox .is-disabled &#123;</span><br><span class="line">      display: none !important;</span><br><span class="line">    &#125;</span><br><span class="line">    //引入图标的位置</span><br><span class="line">    .el-tree-node__expand-icon &#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: 4px;</span><br><span class="line">      // 图标是否旋转，如果是箭头类型的，可以设置旋转90度。</span><br><span class="line">      .expanded &#123;</span><br><span class="line">        transform: rotate(90deg);</span><br><span class="line">        color: rgba(0, 130, 255, 1);</span><br><span class="line">      &#125;</span><br><span class="line">      // 未展开的节点</span><br><span class="line">      &amp;:before &#123;</span><br><span class="line">        content: url(&#x27;../assets/iconImg/right.png&#x27;);</span><br><span class="line">        font-size: 12px;</span><br><span class="line">        color: #000;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 叶子节点（不显示图标）</span><br><span class="line">    .is-leaf.el-tree-node__expand-icon::before &#123;</span><br><span class="line">display: block;</span><br><span class="line">      background: none !important;</span><br><span class="line">      content: &quot;&quot;;</span><br><span class="line">      width: 18px;</span><br><span class="line">      height: 18px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="最终显示样式"><a href="#最终显示样式" class="headerlink" title="最终显示样式"></a>最终显示样式</h4><p><img src="https://i.postimg.cc/90xxNRGT/image-20230523093609879.png" alt="image-20230523093609879"></p><h2 id="二、树形控件数据搜索过滤"><a href="#二、树形控件数据搜索过滤" class="headerlink" title="二、树形控件数据搜索过滤"></a>二、树形控件数据搜索过滤</h2><p>在需要对节点进行过滤时，调用 Tree 实例的<code>filter</code>方法，参数为关键字。需要注意的是，此时需要设置<code>filter-node-method</code>，值为过滤函数。</p><p>html部分加一个搜索过滤条件的input</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input style=&quot;margin-top: 1vh&quot; v-model=&quot;filterText&quot; placeholder=&quot;请输入关键词搜索目录&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;el-tree :data=&quot;treeData&quot; show-checkbox node-key=&quot;id&quot; :check-on-click-node=&quot;false&quot; ref=&quot;tree&quot; </span><br><span class="line">          :filter-node-method=&quot;filterNode&quot; //在树形组件里面添加过滤</span><br><span class="line">         :props=&quot;props&quot; </span><br><span class="line">         @check-change=&quot;handleCheckChange&quot; </span><br><span class="line">         :check-strictly=&quot;false&quot;&gt;</span><br></pre></td></tr></table></figure><p>在watch中监听<code>filterText</code>的变化，根据变化去调用<code>filter</code>方法去过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    filterText(val) &#123;</span><br><span class="line">      this.$refs.tree.filter(val);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">//方法里面定义过滤方法</span><br><span class="line">method:&#123;</span><br><span class="line">    filterNode(value, data) &#123;</span><br><span class="line">      if (!value) return true;</span><br><span class="line">      return data.label.indexOf(value) !== -1;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://i.postimg.cc/0j5WfdJP/image-20230523095602409.png" alt="image-20230523095602409" style="zoom: 200%;" /><h2 id="三、选择的数据展示点击以及删除"><a href="#三、选择的数据展示点击以及删除" class="headerlink" title="三、选择的数据展示点击以及删除"></a>三、选择的数据展示点击以及删除</h2><p>代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;sidebarNav&quot;&gt;</span><br><span class="line">      &lt;el-row&gt;</span><br><span class="line">        &lt;el-col :span=&quot;8&quot;&gt;</span><br><span class="line">            &lt;!-- 过滤数据 --&gt;</span><br><span class="line">          &lt;el-input style=&quot;margin-top: 1vh&quot; v-model=&quot;filterText&quot; placeholder=&quot;请输入关键词搜索目录&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;div class=&quot;page_one&quot;&gt;</span><br><span class="line">            &lt;el-tree :data=&quot;treeData&quot; show-checkbox node-key=&quot;id&quot; :check-on-click-node=&quot;false&quot; ref=&quot;tree&quot; accordion</span><br><span class="line">              :filter-node-method=&quot;filterNode&quot; :props=&quot;props&quot; @check-change=&quot;handleCheckChange&quot; :check-strictly=&quot;false&quot;&gt;</span><br><span class="line">              &lt;template #default=&quot;&#123; node &#125;&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;custom-tree-node&quot;&gt;</span><br><span class="line">                  &lt;!-- 第一级固定一个图标 --&gt;</span><br><span class="line">                  &lt;img :src=&quot;require(&#x27;../assets/iconImg/wjj.png&#x27;)&quot; style=&quot;margin-right: 5px;&quot; v-if=&quot;node.level === 1&quot;</span><br><span class="line">                    class=&quot;icon&quot; /&gt;</span><br><span class="line">                  &lt;span</span><br><span class="line">                    :class=&quot;[node.childNodes.length ? &#x27;bold&#x27; : &#x27;&#x27;, node.expanded || node.checked ? &#x27;isCurrent&#x27; : &#x27;&#x27;]&quot;&gt;&#123;&#123;</span><br><span class="line">                      node.label &#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">            &lt;/el-tree&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">        &lt;el-col :span=&quot;16&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;chooseTagWrap&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;mainTag&quot;&gt;已选标签&lt;/span&gt;</span><br><span class="line">            &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">              &lt;div v-for=&quot;item in currentdata&quot; @click=&quot;clickTag(item.id)&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">                &lt;!-- 超出部分气泡显示完全内容 --&gt;</span><br><span class="line">                &lt;el-tooltip class=&quot;item&quot; effect=&quot;dark&quot; :content=&quot;item.label&quot; placement=&quot;top&quot;&gt;</span><br><span class="line">                  &lt;div class=&quot;item&quot; :class=&quot;&#123; liBackground: changeLeftBackground == item.id &#125;&quot;&gt;</span><br><span class="line">                    &lt;span style=&quot;overflow: hidden;white-space: nowrap;text-overflow: ellipsis;&quot;&gt;&#123;&#123; item.label &#125;&#125;&lt;/span&gt;</span><br><span class="line">                    &lt;span v-if=&quot;changeLeftBackground == item.id&quot; style=&quot;margin-left:5px&quot; @click=&quot;delTag(item.id)&quot;&gt;x&lt;/span&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/el-tooltip&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;btn&quot; @click=&quot;partcahnge&quot; v-if=&quot;btnShow&quot;&gt;</span><br><span class="line">                &lt;span v-if=&quot;part&quot;&gt;展开&lt;/span&gt;</span><br><span class="line">                &lt;span v-else&gt;收起&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        label: &#x27;label&#x27;,</span><br><span class="line">        children: &#x27;children&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">      chooseTag: [],//选择的tag数组</span><br><span class="line">      currentdata: [],//显示的tag数组</span><br><span class="line">      filterText: &#x27;&#x27;,//过滤数据</span><br><span class="line">      delTagId: &#x27;&#x27;,//删除的数据</span><br><span class="line">      treeData: [&#123;//tree的数组数据，可接接口</span><br><span class="line">        id: 1,</span><br><span class="line">        label: &#x27;一级 1&#x27;,</span><br><span class="line">        children: [&#123;</span><br><span class="line">          id: 4,</span><br><span class="line">          label: &#x27;二级 1-1&#x27;,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            id: 9,</span><br><span class="line">            label: &#x27;三级 1-1-1&#x27;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            id: 10,</span><br><span class="line">            label: &#x27;三级 1-1-2&#x27;</span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: 2,</span><br><span class="line">        label: &#x27;一级 2&#x27;,</span><br><span class="line">        children: [&#123;</span><br><span class="line">          id: 5,</span><br><span class="line">          label: &#x27;二级 2-1&#x27;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          id: 6,</span><br><span class="line">          label: &#x27;二级 2-2&#x27;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: 3,</span><br><span class="line">        label: &#x27;一级 3&#x27;,</span><br><span class="line">        children: [&#123;</span><br><span class="line">          id: 7,</span><br><span class="line">          label: &#x27;二级 3-1&#x27;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          id: 8,</span><br><span class="line">          label: &#x27;二级 3-2&#x27;,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            id: 11,</span><br><span class="line">            label: &#x27;三级 3-2-1&#x27;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            id: 12,</span><br><span class="line">            label: &#x27;三级 3-2-2&#x27;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            id: 13,</span><br><span class="line">            label: &#x27;三级 3-2-3&#x27;</span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;],</span><br><span class="line">      btnShow: false,//展开收起显示</span><br><span class="line">      maxNum: 0,//一行最大的容量</span><br><span class="line">      changeLeftBackground: &#x27;&#x27;//右侧数据点击</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">      //深拷贝数据，第一层数据disabled属性添加</span><br><span class="line">    let data = JSON.parse(JSON.stringify(this.treeData))</span><br><span class="line">    this.treeData = []</span><br><span class="line">    data.map(item =&gt; &#123;</span><br><span class="line">      item.disabled = true</span><br><span class="line">      this.treeData.push(item)</span><br><span class="line">    &#125;)</span><br><span class="line">      //获取宽度设置maxNum</span><br><span class="line">    const wrap = document.getElementsByClassName(&#x27;chooseTagWrap&#x27;)[0]</span><br><span class="line">    console.log(wrap.clientWidth);</span><br><span class="line">    this.maxNum = (Math.floor((wrap.clientWidth - 20) / 152)) * 2</span><br><span class="line">    this.tagChange()</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">      //过滤数据监听</span><br><span class="line">    filterText(val) &#123;</span><br><span class="line">      this.$refs.tree.filter(val);</span><br><span class="line">    &#125;,</span><br><span class="line">      //选择数据监听</span><br><span class="line">    chooseTag(val) &#123;</span><br><span class="line">      this.tagChange()</span><br><span class="line">      console.log(val);</span><br><span class="line">      // this.$refs.tree.filter(val);</span><br><span class="line">    &#125;,</span><br><span class="line">      //删除数据监听</span><br><span class="line">    delTagId(val) &#123;</span><br><span class="line">      if (val) &#123;</span><br><span class="line">        console.log(val, &#x27;delTagId&#x27;);</span><br><span class="line">        this.$refs.tree.setChecked(val, false, true);</span><br><span class="line">        this.handleCheckChange()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleCheckChange() &#123;</span><br><span class="line">      // 获取已选择树形节点</span><br><span class="line">      // getCheckedNodes 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 false 2. 是否包含半选节点，默认值为 false</span><br><span class="line">      let list = this.$refs.tree.getCheckedNodes(true, false);</span><br><span class="line">      if (list.length &gt; 0) &#123;</span><br><span class="line">        this.chooseTag = JSON.parse(JSON.stringify(list))</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.chooseTag = []</span><br><span class="line">      &#125;</span><br><span class="line">      this.delTagId = null</span><br><span class="line">      console.log(this.chooseTag);</span><br><span class="line">    &#125;,</span><br><span class="line">    filterNode(value, data) &#123;</span><br><span class="line">      if (!value) return true;</span><br><span class="line">      return data.label.indexOf(value) !== -1;</span><br><span class="line">    &#125;,</span><br><span class="line">    //tag展开收起</span><br><span class="line">    partcahnge() &#123;</span><br><span class="line">      if (this.part) &#123;</span><br><span class="line">        this.part = false</span><br><span class="line">        this.currentdata = this.chooseTag</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.part = true</span><br><span class="line">        this.currentdata = this.chooseTag.slice(0, this.maxNum)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    tagChange() &#123;</span><br><span class="line">      if (this.chooseTag.length &gt; this.maxNum) &#123;</span><br><span class="line">        this.btnShow = true</span><br><span class="line">        this.part = true</span><br><span class="line">        this.currentdata = this.chooseTag.slice(0, this.maxNum)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.currentdata = this.chooseTag</span><br><span class="line">        this.btnShow = false</span><br><span class="line">        this.part = true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    //点击标签</span><br><span class="line">    clickTag(e) &#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">      this.changeLeftBackground = e</span><br><span class="line">    &#125;,</span><br><span class="line">    //删除标签</span><br><span class="line">    delTag(e) &#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">      this.delTagId = e</span><br><span class="line">      this.chooseTag = this.chooseTag.filter(item =&gt; item.id != e)</span><br><span class="line">      console.log(this.chooseTag);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.mainTag &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  font-weight: 700;</span><br><span class="line">  line-height: 18.75px;</span><br><span class="line">  color: rgba(0, 0, 0, 1);</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebarNav &#123;</span><br><span class="line">  padding: 1.5vh 10px;</span><br><span class="line">  height: 97vh;</span><br><span class="line">  background: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.page_one &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  margin-top: 16px;</span><br><span class="line">  height: calc(100vh - 140px);</span><br><span class="line">  overflow-y: scroll;</span><br><span class="line"></span><br><span class="line">  .isCurrent &#123;</span><br><span class="line">    color: rgba(0, 130, 255, 1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  :deep().el-tree &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line"></span><br><span class="line">    //原有的箭头 去掉</span><br><span class="line">    .el-icon svg &#123;</span><br><span class="line">      display: none;</span><br><span class="line">      height: 0;</span><br><span class="line">      width: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .el-checkbox .is-disabled &#123;</span><br><span class="line">      display: none !important;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //引入图标的位置</span><br><span class="line">    .el-tree-node__expand-icon &#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: 4px;</span><br><span class="line"></span><br><span class="line">      // 图标是否旋转，如果是箭头类型的，可以设置旋转90度。</span><br><span class="line">      .expanded &#123;</span><br><span class="line">        transform: rotate(90deg);</span><br><span class="line">        color: rgba(0, 130, 255, 1);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 未展开的节点</span><br><span class="line">      &amp;:before &#123;</span><br><span class="line">        content: url(&#x27;../assets/iconImg/right.png&#x27;);</span><br><span class="line">        font-size: 12px;</span><br><span class="line">        color: #000;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 叶子节点（不显示图标）</span><br><span class="line">    .is-leaf.el-tree-node__expand-icon::before &#123;</span><br><span class="line">      display: block;</span><br><span class="line">      background: none !important;</span><br><span class="line">      content: &quot;&quot;;</span><br><span class="line">      width: 18px;</span><br><span class="line">      height: 18px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.chooseTagWrap &#123;</span><br><span class="line">  background: #fff;</span><br><span class="line">  padding: 5px 10px;</span><br><span class="line">  min-height: 15.4vh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  width: 100%;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line"></span><br><span class="line">  .item &#123;</span><br><span class="line">    margin: 5px 10px;</span><br><span class="line">    padding: 5px 10px;</span><br><span class="line">    border: 1px solid rgb(229, 229, 229);</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    width: 110px;</span><br><span class="line"></span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .liBackground &#123;</span><br><span class="line">    color: rgba(0, 130, 255, 1);</span><br><span class="line">    border: 1px solid rgba(0, 130, 255, 1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .btn &#123;</span><br><span class="line">    height: 20px;</span><br><span class="line">    width: 40px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin: 10px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">    color: aqua;</span><br><span class="line">    cursor: pointer;</span><br><span class="line"></span><br><span class="line">    span &#123;</span><br><span class="line">      font-size: 12px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.postimg.cc/bYLFvMKJ/image-20230523101206792.png" alt="image-20230523101206792"></p><p>了解更多<a href="https://element.eleme.cn/#/zh-CN/component/tree">elemrnt-ui树形控件官网</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于vue和element-ui的tree联动玩法&quot;&gt;&lt;a href=&quot;#基于vue和element-ui的tree联动玩法&quot; class=&quot;headerlink&quot; title=&quot;基于vue和element-ui的tree联动玩法&quot;&gt;&lt;/a&gt;&lt;strong&gt;基于v</summary>
      
    
    
    
    <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
    <category term="前端技术进阶" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6/"/>
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
    <category term="element-ui" scheme="http://example.com/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>js数组扁平化</title>
    <link href="http://example.com/2022/08/04/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-js-%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/"/>
    <id>http://example.com/2022/08/04/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-js-%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/</id>
    <published>2022-08-04T12:34:23.000Z</published>
    <updated>2023-05-08T09:22:25.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a><strong>数组扁平化</strong></h1><blockquote><p><code>Vue3</code>的新特性，如下：</p><ul><li>速度更快</li><li>体积减少</li><li>更易维护</li><li>更接近原生</li><li>更易使用</li></ul></blockquote><h2 id="1、双向数据绑定原理"><a href="#1、双向数据绑定原理" class="headerlink" title="1、双向数据绑定原理"></a>1、双向数据绑定原理</h2><p>vue2 是结合发布者订阅者模式，结合es6Object.defineProperty()对数据进行劫持，进一步通过vue中的watcher的update实现双向数据绑定。<br>vue3 中使用了es6的proxy进行数据代理。</p><p>相对于vue2，使用proxy的优势：</p><p>defineProperty只能监听某个属性，不能对全对象监听；<br>可以监听到数组内部的变化；<br>vue2中我们给对象添加一个新属性，它不会更新到视图上，只是因为新添加的属性并没有通过Object.defineProperty()进行响应式设置，但是vue3中的proxy对于动态添加的属性也是具有响应式的.</p><h2 id="2、vue3支持碎片"><a href="#2、vue3支持碎片" class="headerlink" title="2、vue3支持碎片"></a>2、vue3支持碎片</h2><p>也就是说，vue3在组件中支持多个根节点.</p><p>vue2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>vue3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="3、Composition-API-组合api"><a href="#3、Composition-API-组合api" class="headerlink" title="3、Composition API (组合api)"></a>3、Composition API (组合api)</h2><p>vue2和vue3最大的区别就是，vue3使用了Composition API (组合api)</p><p>在vue2中是使用的Options API，这种写法不方便我们的阅读和交流，逻辑过于分散。</p><p>vue2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;<span class="comment">// 数据</span></span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">components</span>:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>vue3</p><p>这样代码会更加简洁和整洁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 数据 和 方法都在setup里面使用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="4、生命周期钩子"><a href="#4、生命周期钩子" class="headerlink" title="4、生命周期钩子"></a>4、生命周期钩子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue2--------------vue3</span><br><span class="line">beforeCreate  -&gt; setup()比beforeCreate和created执行的还要早</span><br><span class="line">created       -&gt; setup()</span><br><span class="line">beforeMount   -&gt; onBeforeMount组件挂载到节点之前执行的函数</span><br><span class="line">mounted       -&gt; onMounted组件挂载完成后执行的函数</span><br><span class="line">beforeUpdate  -&gt; onBeforeUpdate组件更新之前执行的函数</span><br><span class="line">updated       -&gt; onUpdated组件更新完成之后执行的函数</span><br><span class="line">beforeDestroy -&gt; onBeforeUnmount组件卸载之前执行的函数</span><br><span class="line">destroyed     -&gt; onUnmounted组件卸载完成后执行的函数</span><br><span class="line"></span><br><span class="line">若组件被keep-alive包含，则会多出两个钩子函数：</span><br><span class="line">activated     -&gt; onActivated组件激活时触发</span><br><span class="line">deactivated   -&gt; onDeactivated组件失活时触发</span><br></pre></td></tr></table></figure><h2 id="5、父子传参不同，setup-函数"><a href="#5、父子传参不同，setup-函数" class="headerlink" title="5、父子传参不同，setup()函数"></a>5、父子传参不同，setup()函数</h2><p>因为在setup里面是获取不到this，所以在vue3中我们通过setup(props,context)两个参数进行父子之间的传参。</p><p>vue2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&#x27;father&#x27;&gt;</span><br><span class="line">    &lt;my :msg=&quot;msg&quot; @get=&quot;get&quot;&gt;&lt;/my&gt;</span><br><span class="line">    &#123;&#123;sonMsg&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import my from &#x27;@/components/my&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        msg:&#x27;父组件的数据&#x27;,</span><br><span class="line">        sonMsg:&#x27;&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    get(val) &#123;</span><br><span class="line">        this.sonMsg = val</span><br><span class="line">        console.log(val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">    my</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">#子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&#x27;son&#x27;&gt;</span><br><span class="line">      &#123;&#123;msg&#125;&#125;</span><br><span class="line">      &lt;button @click=&quot;handler&quot;&gt;点击获取数据&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> &lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">props:[&quot;msg&quot;],</span><br><span class="line">methods:&#123;</span><br><span class="line">    handler() &#123;</span><br><span class="line">        this.$emit(&#x27;get&#x27;,&#x27;子组件的数据&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>vue3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&#x27;father&#x27;&gt;</span><br><span class="line">    &lt;my :msg=&quot;msg&quot; @get=&quot;get&quot;&gt;&lt;/my&gt;</span><br><span class="line">    &#123;&#123;sonMsg&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import my from &#x27;@/components/my&#x27;</span><br><span class="line">import &#123; reactive,toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">    const obj = reactive(&#123;</span><br><span class="line">        msg:&#x27;父组件的数据&#x27;,</span><br><span class="line">        sonMsg:&#x27;&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const get = (val) =&gt;&#123;</span><br><span class="line">        console.log(val);</span><br><span class="line">        obj.sonMsg = val</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        ...toRefs(obj),</span><br><span class="line">        get</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">    my</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"># 子组件</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&#x27;son&#x27;&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;handler&quot;&gt;点击获取数据&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">props:[&quot;msg&quot;],</span><br><span class="line">setup(props,&#123;attrs,slots,emit&#125;) &#123;</span><br><span class="line">    const handler = ()=&gt;&#123;</span><br><span class="line">        emit(&#x27;get&#x27;,&#x27;子组件的数据&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        handler</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6、移除了filter过滤器"><a href="#6、移除了filter过滤器" class="headerlink" title="6、移除了filter过滤器"></a>6、移除了filter过滤器</h2><p>在vue3中，移除了filter，我们可以使用计算属性进行代替</p><h2 id="7、vue2和vue3的diff算法"><a href="#7、vue2和vue3的diff算法" class="headerlink" title="7、vue2和vue3的diff算法"></a>7、vue2和vue3的diff算法</h2><p>vue2</p><p>vue2 diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后用patch记录的消息去局部更新Dom。<br>vue2 diff算法会比较每一个vnode,而对于一些不参与更新的元素，进行比较是有点消耗性能的。</p><p>vue3</p><p>vue3 diff算法在初始化的时候会给每个虚拟节点添加一个patchFlags，patchFlags就是优化的标识。<br>只会比较patchFlags发生变化的vnode,进行更新视图，对于没有变化的元素做静态标记，在渲染的时候直接复用。</p><h2 id="8、v-if-和-v-for的优先级"><a href="#8、v-if-和-v-for的优先级" class="headerlink" title="8、v-if 和 v-for的优先级"></a>8、v-if 和 v-for的优先级</h2><p>vue2<br>我们最好不要把v-if和v-for同时用在一个元素上，这样会带来性能的浪费(每次都要先渲染才会进行条件判断)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v-for 优先于 v-if 生效</span><br><span class="line">&lt;div v-if=&quot;index == 1&quot; v-for=&quot;(item,index) in arr&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>vue3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v-if 优先于 v-for 生效</span><br><span class="line">&lt;div v-if=&quot;index == 1&quot; v-for=&quot;(item,index) in arr&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>vue中会给我们报警告：属性“index”在渲染期间被访问，但未在实例上定义(v-if先进行判断，但是这时候v-for还没有渲染，所以index是找不到的)</p><p>了解更多<a href="https://cn.vuejs.org/#%E6%A6%82%E8%A7%88">vue3的官网</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组扁平化&quot;&gt;&lt;a href=&quot;#数组扁平化&quot; class=&quot;headerlink&quot; title=&quot;数组扁平化&quot;&gt;&lt;/a&gt;&lt;strong&gt;数组扁平化&lt;/strong&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Vue3&lt;/code&gt;的新特性，如下：&lt;/p</summary>
      
    
    
    
    <category term="js" scheme="http://example.com/categories/js/"/>
    
    
    <category term="前端技术基础" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
    <category term="数组方法" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>vue2与vue3的区别</title>
    <link href="http://example.com/2022/06/12/vue2%E4%B8%8Evue3%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/06/12/vue2%E4%B8%8Evue3%E5%8C%BA%E5%88%AB/</id>
    <published>2022-06-12T13:25:56.000Z</published>
    <updated>2023-03-07T06:51:34.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue2与vue3区别"><a href="#vue2与vue3区别" class="headerlink" title="vue2与vue3区别"></a><strong>vue2与vue3区别</strong></h1><blockquote><p><code>Vue3</code>的新特性，如下：</p><ul><li>速度更快</li><li>体积减少</li><li>更易维护</li><li>更接近原生</li><li>更易使用</li></ul></blockquote><h2 id="1、双向数据绑定原理"><a href="#1、双向数据绑定原理" class="headerlink" title="1、双向数据绑定原理"></a>1、双向数据绑定原理</h2><p>vue2 是结合发布者订阅者模式，结合es6Object.defineProperty()对数据进行劫持，进一步通过vue中的watcher的update实现双向数据绑定。<br>vue3 中使用了es6的proxy进行数据代理。</p><p>相对于vue2，使用proxy的优势：</p><p>defineProperty只能监听某个属性，不能对全对象监听；<br>可以监听到数组内部的变化；<br>vue2中我们给对象添加一个新属性，它不会更新到视图上，只是因为新添加的属性并没有通过Object.defineProperty()进行响应式设置，但是vue3中的proxy对于动态添加的属性也是具有响应式的.</p><h2 id="2、vue3支持碎片"><a href="#2、vue3支持碎片" class="headerlink" title="2、vue3支持碎片"></a>2、vue3支持碎片</h2><p>也就是说，vue3在组件中支持多个根节点.</p><p>vue2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>vue3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="3、Composition-API-组合api"><a href="#3、Composition-API-组合api" class="headerlink" title="3、Composition API (组合api)"></a>3、Composition API (组合api)</h2><p>vue2和vue3最大的区别就是，vue3使用了Composition API (组合api)</p><p>在vue2中是使用的Options API，这种写法不方便我们的阅读和交流，逻辑过于分散。</p><p>vue2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;<span class="comment">// 数据</span></span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">components</span>:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>vue3</p><p>这样代码会更加简洁和整洁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 数据 和 方法都在setup里面使用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="4、生命周期钩子"><a href="#4、生命周期钩子" class="headerlink" title="4、生命周期钩子"></a>4、生命周期钩子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue2--------------vue3</span><br><span class="line">beforeCreate  -&gt; setup()比beforeCreate和created执行的还要早</span><br><span class="line">created       -&gt; setup()</span><br><span class="line">beforeMount   -&gt; onBeforeMount组件挂载到节点之前执行的函数</span><br><span class="line">mounted       -&gt; onMounted组件挂载完成后执行的函数</span><br><span class="line">beforeUpdate  -&gt; onBeforeUpdate组件更新之前执行的函数</span><br><span class="line">updated       -&gt; onUpdated组件更新完成之后执行的函数</span><br><span class="line">beforeDestroy -&gt; onBeforeUnmount组件卸载之前执行的函数</span><br><span class="line">destroyed     -&gt; onUnmounted组件卸载完成后执行的函数</span><br><span class="line"></span><br><span class="line">若组件被keep-alive包含，则会多出两个钩子函数：</span><br><span class="line">activated     -&gt; onActivated组件激活时触发</span><br><span class="line">deactivated   -&gt; onDeactivated组件失活时触发</span><br></pre></td></tr></table></figure><h2 id="5、父子传参不同，setup-函数"><a href="#5、父子传参不同，setup-函数" class="headerlink" title="5、父子传参不同，setup()函数"></a>5、父子传参不同，setup()函数</h2><p>因为在setup里面是获取不到this，所以在vue3中我们通过setup(props,context)两个参数进行父子之间的传参。</p><p>vue2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&#x27;father&#x27;&gt;</span><br><span class="line">    &lt;my :msg=&quot;msg&quot; @get=&quot;get&quot;&gt;&lt;/my&gt;</span><br><span class="line">    &#123;&#123;sonMsg&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import my from &#x27;@/components/my&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        msg:&#x27;父组件的数据&#x27;,</span><br><span class="line">        sonMsg:&#x27;&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    get(val) &#123;</span><br><span class="line">        this.sonMsg = val</span><br><span class="line">        console.log(val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">    my</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">#子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&#x27;son&#x27;&gt;</span><br><span class="line">      &#123;&#123;msg&#125;&#125;</span><br><span class="line">      &lt;button @click=&quot;handler&quot;&gt;点击获取数据&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> &lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">props:[&quot;msg&quot;],</span><br><span class="line">methods:&#123;</span><br><span class="line">    handler() &#123;</span><br><span class="line">        this.$emit(&#x27;get&#x27;,&#x27;子组件的数据&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>vue3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&#x27;father&#x27;&gt;</span><br><span class="line">    &lt;my :msg=&quot;msg&quot; @get=&quot;get&quot;&gt;&lt;/my&gt;</span><br><span class="line">    &#123;&#123;sonMsg&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import my from &#x27;@/components/my&#x27;</span><br><span class="line">import &#123; reactive,toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">    const obj = reactive(&#123;</span><br><span class="line">        msg:&#x27;父组件的数据&#x27;,</span><br><span class="line">        sonMsg:&#x27;&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const get = (val) =&gt;&#123;</span><br><span class="line">        console.log(val);</span><br><span class="line">        obj.sonMsg = val</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        ...toRefs(obj),</span><br><span class="line">        get</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">    my</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"># 子组件</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&#x27;son&#x27;&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;handler&quot;&gt;点击获取数据&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">props:[&quot;msg&quot;],</span><br><span class="line">setup(props,&#123;attrs,slots,emit&#125;) &#123;</span><br><span class="line">    const handler = ()=&gt;&#123;</span><br><span class="line">        emit(&#x27;get&#x27;,&#x27;子组件的数据&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        handler</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6、移除了filter过滤器"><a href="#6、移除了filter过滤器" class="headerlink" title="6、移除了filter过滤器"></a>6、移除了filter过滤器</h2><p>在vue3中，移除了filter，我们可以使用计算属性进行代替</p><h2 id="7、vue2和vue3的diff算法"><a href="#7、vue2和vue3的diff算法" class="headerlink" title="7、vue2和vue3的diff算法"></a>7、vue2和vue3的diff算法</h2><p>vue2</p><p>vue2 diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后用patch记录的消息去局部更新Dom。<br>vue2 diff算法会比较每一个vnode,而对于一些不参与更新的元素，进行比较是有点消耗性能的。</p><p>vue3</p><p>vue3 diff算法在初始化的时候会给每个虚拟节点添加一个patchFlags，patchFlags就是优化的标识。<br>只会比较patchFlags发生变化的vnode,进行更新视图，对于没有变化的元素做静态标记，在渲染的时候直接复用。</p><h2 id="8、v-if-和-v-for的优先级"><a href="#8、v-if-和-v-for的优先级" class="headerlink" title="8、v-if 和 v-for的优先级"></a>8、v-if 和 v-for的优先级</h2><p>vue2<br>我们最好不要把v-if和v-for同时用在一个元素上，这样会带来性能的浪费(每次都要先渲染才会进行条件判断)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v-for 优先于 v-if 生效</span><br><span class="line">&lt;div v-if=&quot;index == 1&quot; v-for=&quot;(item,index) in arr&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>vue3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v-if 优先于 v-for 生效</span><br><span class="line">&lt;div v-if=&quot;index == 1&quot; v-for=&quot;(item,index) in arr&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>vue中会给我们报警告：属性“index”在渲染期间被访问，但未在实例上定义(v-if先进行判断，但是这时候v-for还没有渲染，所以index是找不到的)</p><p>了解更多<a href="https://cn.vuejs.org/#%E6%A6%82%E8%A7%88">vue3的官网</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue2与vue3区别&quot;&gt;&lt;a href=&quot;#vue2与vue3区别&quot; class=&quot;headerlink&quot; title=&quot;vue2与vue3区别&quot;&gt;&lt;/a&gt;&lt;strong&gt;vue2与vue3区别&lt;/strong&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;cod</summary>
      
    
    
    
    <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
    <category term="前端技术进阶" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6/"/>
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
    <category term="vue3" scheme="http://example.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>vue项目数据刷新视图不更新排查</title>
    <link href="http://example.com/2022/03/02/vue3%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%88%B7%E6%96%B0%E8%A7%86%E5%9B%BE%E4%B8%8D%E6%9B%B4%E6%96%B0%E6%8E%92%E6%9F%A5/"/>
    <id>http://example.com/2022/03/02/vue3%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%88%B7%E6%96%B0%E8%A7%86%E5%9B%BE%E4%B8%8D%E6%9B%B4%E6%96%B0%E6%8E%92%E6%9F%A5/</id>
    <published>2022-03-02T12:32:09.000Z</published>
    <updated>2023-03-07T03:15:39.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue项目数据刷新视图不更新排查"><a href="#vue项目数据刷新视图不更新排查" class="headerlink" title="vue项目数据刷新视图不更新排查"></a><strong>vue项目数据刷新视图不更新排查</strong></h1><blockquote><p>在做一个vue3项目时，对于一个循环渲染的模块进行增删，新增数据显示没有问题，删除总是有问题，虽然最终排查是因为key设置为index的原因，但是还是想总结一下vue数据更新的知识点。</p><p>关于循环渲染key值的绑定在文末也会总结</p></blockquote><h2 id="一、vue2中项目更新"><a href="#一、vue2中项目更新" class="headerlink" title="一、vue2中项目更新"></a><strong>一、vue2中项目更新</strong></h2><h3 id="1、数组数据变动"><a href="#1、数组数据变动" class="headerlink" title="1、数组数据变动"></a><strong>1、数组数据变动</strong></h3><p>在我们使用一些方法操作数组变动数据的时候，有一些方法时无法被vue监测的，有这些方法是可以是数组发生变化并且被vue监测</p><table><thead><tr><th>push()</th><th>pop()</th><th>shift()</th><th>reverse()</th></tr></thead><tbody><tr><td>unshift()</td><td>splice()</td><td>sort()</td><td></td></tr></tbody></table><p>这些方法可以直接改变原数组并且被vue监听</p><p><strong>vue也不能检测利用索引直接设置，以及直接修改数组的长度</strong></p><h3 id="2、对象属性的添加删除"><a href="#2、对象属性的添加删除" class="headerlink" title="2、对象属性的添加删除"></a><strong>2、对象属性的添加删除</strong></h3><p>Vue 不能检测到对象属性的添加或删除</p><p>由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的</p><p><strong>解决办法：</strong></p><p>使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上</p><p>Vue.set(vm.someObject, ‘b’, 2) 或者 this.$set(this.someObject,’b’,2) （这也是全局 Vue.set 方法的别名）</p><p>其中数组里面不能直接用索引对数组赋值改变值也可以利用set</p><p> this.$set(this.arr,1,2) </p><p>​         <img src="https://gitee.com/victory_na/my-img-host/raw/master/img/20220402140026.png" alt="img">                </p><p><a href="https://cn.vuejs.org/v2/api/#Vue-set">set官网</a></p><h3 id="3、vue2数据绑定"><a href="#3、vue2数据绑定" class="headerlink" title="3、vue2数据绑定"></a>3、vue2数据绑定</h3><p><strong>什么是数据双向绑定</strong>？ </p><p>　　vue是一个mvvm框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是vue的精髓之处了。<strong>值得注意的是，</strong>我们所说的数据双向绑定，一定是对于UI控件来说的，非UI控件不会涉及到数据双向绑定。</p><p><strong>为什么要实现数据的双向绑定</strong>？</p><p>　　 在vue中，如果使用vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的UI控件来说，对于我们处理表单，vue的双向数据绑定用起来就特别舒服了。 <strong>即两者并不互斥， 在全局性数据流使用单项，方便跟踪； 局部性数据流使用双向，简单易操作。</strong></p><h4 id="vue响应式原理"><a href="#vue响应式原理" class="headerlink" title="vue响应式原理"></a>vue响应式原理</h4><p><strong>vue是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的getter，setter，当属性发生改变的时候，将变动发布给订阅者，触发监听回调</strong></p><h2 id="二、vue3中数据更新"><a href="#二、vue3中数据更新" class="headerlink" title="二、vue3中数据更新"></a><strong>二、vue3中数据更新</strong></h2><h3 id="ref函数："><a href="#ref函数：" class="headerlink" title="ref函数："></a>ref函数：</h3><p>语法：const xxx = ref (initValue)<br> 接受的数据类型：基本类型，引用类型<br> 作用：把参数加工成一个响应式对象，全称为reference对象(我们下面一律简称为ref对象)<br> 核心原理：如果使用的是基本类型响应式依赖Object.defineProperty( )的get( )和set( )，如果ref使用的是引用类型，底层ref会借助reactive的proxy 定义响应式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123; refBaseType &#125;&#125;&lt;/h3&gt;//i am ref</span><br><span class="line">  &lt;h3&gt;&#123;&#123; refReferenceType &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">let refBaseType = ref(null)</span><br><span class="line">//ref 需要用.value去获取值</span><br><span class="line">refBaseType.value = &#x27;i am ref&#x27;</span><br><span class="line">let refReferenceType = ref(&#123;&#125;)</span><br><span class="line">//如果ref使用的是对象，ref会借助reactive生成proxy</span><br><span class="line">refReferenceType.value = &#123; count: 1 &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="reactive函数："><a href="#reactive函数：" class="headerlink" title="reactive函数："></a>reactive函数：</h3><p>语法：const xxx = reactive(源对象)<br> 接受的数据类型：引用类型<br> 作用：把参数加工成一个代理对象，全称为proxy对象<br> 核心原理：基于Es6的Proxy实现，通过Reflect反射代理操作源对象，相比于reactive定义的浅层次响应式数据对象，reactive定义的是更深层次的响应式数据对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123; reactiveBaseType &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123; reactiveReferenceType &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;div @click=&quot;setData&quot;&gt;setData&lt;/div&gt;</span><br><span class="line">  &lt;div @click=&quot;setReactive&quot;&gt;setReactive&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">let reactiveBaseType = reactive(null)</span><br><span class="line">//reactive 无法定义基本类型的proxy,且设置值无法响应数据</span><br><span class="line">let setData = () =&gt; &#123;</span><br><span class="line">  reactiveBaseType = &#x27;fai&#x27;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;reactiveBaseType&#x27;, reactiveBaseType) //null</span><br><span class="line">//如果reactive使用的是引用类型</span><br><span class="line">let reactiveReferenceType = reactive(&#123; count: 1 &#125;)</span><br><span class="line">let setReactive = () =&gt; &#123;</span><br><span class="line">  //这样设置会去proxy</span><br><span class="line">  reactiveReferenceType = &#123; count: 1 &#125;</span><br><span class="line">  console.log(reactiveReferenceType)</span><br><span class="line">  /*</span><br><span class="line">   *&#123;count: 1&#125; //proxy 没了，所以reactive申明的无法直接替换整个对象，如果有这个需求请使用ref</span><br><span class="line">   * */</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>ref和reactive都可以做响应式</p><p>ref:一般用在定义基本类型和引用类型，如果是引用类型底层会借助reactive形成proxy代理对象,可以直接复制整个对象，如table的数据请求回来，需要将数据整体赋值个响应对象这时如果使用的是reactive就无法进行响应。</p><p>reactive：一般用在引用类型，如{}等,不能一次性修改整个对象，如我们后端请求table的数据数据，如果想一次性赋值的整个数组的话，就行不通，此时建议使用ref来定义数组。</p><h2 id="三、循环渲染key值"><a href="#三、循环渲染key值" class="headerlink" title="三、循环渲染key值"></a>三、循环渲染key值</h2><p><em><strong>作用：用唯一标识标记每一个节点，可以高效渲染虚拟DOM树。</strong></em></p><h3 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h3><p>vue和react的虚拟DOM的Diff算法大致相同，其核心是基于两个简单的假设：</p><p><strong>1. 两个相同的组件产生类似的DOM结构，不同的组件产生不同的DOM结构。</strong></p><p><strong>2. 同一层级的一组节点，他们可以通过唯一的id进行区分。</strong></p><p>基于以上这两点假设，使得虚拟DOM的Diff算法的复杂度从**O(n^3)<strong>降到了</strong>O(n)**。。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80OTI3MDM1LTk2MGYyZDg1NmI1ZWM5YzMuanBn?x-oss-process=image/format,png" alt="img"></p><p><strong>key的作用主要是为了高效的更新虚拟DOM。</strong>另外vue中在使用<strong>相同标签名元素的过渡切换</strong>时，也会使用到key属性，其目的也是为了让vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果。</p><h3 id="为什么不能用-index-作为-key"><a href="#为什么不能用-index-作为-key" class="headerlink" title="为什么不能用 index 作为 key"></a><strong>为什么不能用 index 作为 key</strong></h3><p> 如果你用 index 作为 key，那么在删除第二项的时候，index 就会从 1 2 3 变成 1 2（因为 index 永远都 是连续的，所以不可能是 1 3），那么 Vue 依然会认为你删除的是第三项。也就是会遇到上面一样的 bug。</p><p> 所以，永远不要用 index 作为 key。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue项目数据刷新视图不更新排查&quot;&gt;&lt;a href=&quot;#vue项目数据刷新视图不更新排查&quot; class=&quot;headerlink&quot; title=&quot;vue项目数据刷新视图不更新排查&quot;&gt;&lt;/a&gt;&lt;strong&gt;vue项目数据刷新视图不更新排查&lt;/strong&gt;&lt;/h1&gt;</summary>
      
    
    
    
    <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
    <category term="前端技术进阶" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6/"/>
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-前端解决跨域</title>
    <link href="http://example.com/2022/02/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6-vue-%E5%89%8D%E7%AB%AF%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/"/>
    <id>http://example.com/2022/02/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6-vue-%E5%89%8D%E7%AB%AF%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/</id>
    <published>2022-02-21T12:18:52.000Z</published>
    <updated>2023-03-07T03:15:27.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端解决跨域"><a href="#前端解决跨域" class="headerlink" title="前端解决跨域"></a>前端解决跨域</h1><h1 id="一、跨域"><a href="#一、跨域" class="headerlink" title="一、跨域"></a>一、<strong>跨域</strong></h1><h2 id="跨域的概念："><a href="#跨域的概念：" class="headerlink" title="跨域的概念："></a><strong>跨域的概念：</strong></h2><p>在前端领域中，跨域是指浏览器允许向服务器发送跨域请求，从而克服Ajax只能<strong>同源</strong>使用的限制。</p><h2 id="同源策略的概念："><a href="#同源策略的概念：" class="headerlink" title="同源策略的概念："></a><strong>同源策略的概念：</strong></h2><p>同源是指：<strong>协议，端口，主机都相同才同源</strong>。</p><p>同源策略/SOP（Same origin policy）是一种约定，由 Netscape 公司 1995 年引入浏览器，它是浏览器最核心也最基本的安全功能，现在所有支持 JavaScript 的浏览器都会使用这个策略。如果缺少了同源策略，浏览器很容易受到 XSS、 CSFR 等攻击</p><h1 id="二、反向代理实现"><a href="#二、反向代理实现" class="headerlink" title="二、反向代理实现"></a><strong>二、反向代理实现</strong></h1><h2 id="反向代理的概念："><a href="#反向代理的概念：" class="headerlink" title="反向代理的概念："></a><strong>反向代理的概念：</strong></h2><p>反向代理（Reverse Proxy）是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><h2 id="数据流程："><a href="#数据流程：" class="headerlink" title="数据流程："></a><strong>数据流程：</strong></h2><ul><li>数据请求过程：浏览器-》【反向代理服务器-》处理数据的服务器】</li><li>数据返回过程：【处理数据的服务器-》反向代理服务器】-》浏览器</li></ul><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a><strong>代码实现：</strong></h2><p>一般实在vue.config.js里面和一些webpack的配置写在一起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;    <span class="comment">//使用/api代替后端接口</span></span><br><span class="line">          <span class="attr">target</span>: <span class="string">&#x27;http://aa.com/bb&#x27;</span>,<span class="comment">//此处是接口地址</span></span><br><span class="line">          <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//是否跨域</span></span><br><span class="line">          <span class="attr">secure</span>: <span class="literal">false</span>,  <span class="comment">// 当代理某些https服务报错时用</span></span><br><span class="line">          <span class="attr">pathRewrite</span>: &#123; <span class="comment">//对api进行替换</span></span><br><span class="line">              <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完后比如本来要请求’<a href="http://aa.com/bb/cc/dd&#39;,%E9%82%A3%E9%85%8D%E7%BD%AE%E5%90%8E%E8%AF%B7%E6%B1%82%E7%9A%84%E5%9C%B0%E5%9D%80%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%98%AF%E2%80%98api/cc/dd%E2%80%99">http://aa.com/bb/cc/dd&#39;,那配置后请求的地址就可以是‘api/cc/dd’</a></p><h1 id="三、JSONP解决跨域"><a href="#三、JSONP解决跨域" class="headerlink" title="三、JSONP解决跨域"></a><strong>三、JSONP解决跨域</strong></h1><blockquote><p>jsonp原理：<strong>jsonp</strong>的原理就是利用script标签没有跨域限制，通过script标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。</p></blockquote><h2 id="原生JS实现："><a href="#原生JS实现：" class="headerlink" title="原生JS实现："></a><strong>原生JS实现：</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.type = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line"><span class="comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span></span><br><span class="line">script.src = <span class="string">&#x27;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line"><span class="comment">// 回调执行函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleCallback</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    alert(<span class="built_in">JSON</span>.stringify(res));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端返回如下（返回时即执行全局函数）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handleCallback(&#123;<span class="string">&quot;success&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vue-axios实现："><a href="#Vue-axios实现：" class="headerlink" title="Vue axios实现："></a>Vue axios实现：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">this.$http = axios;</span><br><span class="line">this.$http.jsonp(&#x27;http://www.domain2.com:8080/login&#x27;, &#123;</span><br><span class="line"></span><br><span class="line">params: &#123;&#125;,</span><br><span class="line">jsonp: &#x27;handleCallback&#x27;</span><br><span class="line"></span><br><span class="line">&#125;).then((res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">console.log(res); </span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端解决跨域&quot;&gt;&lt;a href=&quot;#前端解决跨域&quot; class=&quot;headerlink&quot; title=&quot;前端解决跨域&quot;&gt;&lt;/a&gt;前端解决跨域&lt;/h1&gt;&lt;h1 id=&quot;一、跨域&quot;&gt;&lt;a href=&quot;#一、跨域&quot; class=&quot;headerlink&quot; title=&quot;一</summary>
      
    
    
    
    <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
    <category term="前端技术进阶" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6/"/>
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-基于vue-quil-deitor的富文本框</title>
    <link href="http://example.com/2022/01/04/%E5%9F%BA%E4%BA%8Evue-quil-deitor%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A1%86/"/>
    <id>http://example.com/2022/01/04/%E5%9F%BA%E4%BA%8Evue-quil-deitor%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A1%86/</id>
    <published>2022-01-04T11:41:10.000Z</published>
    <updated>2023-03-07T03:15:22.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于vue-quil-deitor的富文本框"><a href="#基于vue-quil-deitor的富文本框" class="headerlink" title="基于vue-quil-deitor的富文本框"></a><strong>基于vue-quil-deitor的富文本框</strong></h1><h2 id="一、富文本框的基本使用"><a href="#一、富文本框的基本使用" class="headerlink" title="一、富文本框的基本使用"></a><strong>一、富文本框的基本使用</strong></h2><p>富文本框quill-editor</p><p>vue-quill-editor是基于<a href="https://github.com/quilljs/quill">quill(github地址)</a>适用于Vue2的富文本编辑器，所以对于quill的原生属性扩展也是支持的。<a href="https://quilljs.com/docs/quickstart/">quill文档地址</a></p><p>富文本框首先在项目中引用这款富文本框，</p><p><img src="https://gitee.com/victory_na/my-img-host/raw/master/img/20220402135539.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;quill-editor</span><br><span class="line">          class=&quot;quill-wrapper absolute&quot;</span><br><span class="line">          v-model=&quot;content&quot;//数据绑定</span><br><span class="line">          :ref=&quot;item.ref&quot;</span><br><span class="line">          :maxlength=&quot;20000&quot;</span><br><span class="line">          :options=&quot;editorOption&quot;//默认配置</span><br><span class="line">          @blur=&quot;onEditorBlur($event)&quot;</span><br><span class="line">          @focus=&quot;onEditorFocus($event)&quot;</span><br><span class="line">          @change=&quot;onEditorChange($event,20000)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">&lt;quill-editor&gt;</span><br><span class="line">import Quill from &quot;quill&quot;;</span><br></pre></td></tr></table></figure><p>在js里面写相应的方法函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">onEditorBlur</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line"><span class="function"><span class="title">onEditorFocus</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line"><span class="function"><span class="title">onEditorChange</span>(<span class="params">e, decimalNum</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.quill.getLength() &gt; decimalNum + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;最多输入&quot;</span> + decimalNum + <span class="string">&quot;个字符&quot;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        e.quill.setText(e.quill.getText(<span class="number">0</span>, decimalNum));</span><br><span class="line">        <span class="comment">// e.quill.deleteText(decimalNum,1,e.quill.getText())</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>editorOption是富文本框的一个配置，在这里可以配置富文本框的一个主题和功能项以及一些默认值,,一般可以用vuex统一管理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> editorOption: &#123;</span><br><span class="line"> <span class="attr">placeholder</span>: <span class="string">&#x27;&#x27;</span>,  <span class="comment">//占位符</span></span><br><span class="line"> <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">toolbar</span>: [<span class="comment">//功能项的配置</span></span><br><span class="line">      [<span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;italic&#x27;</span>, <span class="string">&#x27;underline&#x27;</span>, <span class="string">&#x27;strike&#x27;</span>],<span class="comment">//加粗，斜体，下划线，删除线</span></span><br><span class="line">      [<span class="string">&#x27;blockquote&#x27;</span>, <span class="string">&#x27;code-block&#x27;</span>],  <span class="comment">//引用，代码块</span></span><br><span class="line">      [&#123; <span class="string">&#x27;header&#x27;</span>: <span class="number">1</span> &#125;, &#123; <span class="string">&#x27;header&#x27;</span>: <span class="number">2</span> &#125;], <span class="comment">// 标题，键值对的形式；1、2表示字体大小</span></span><br><span class="line">      [&#123; <span class="string">&#x27;list&#x27;</span>: <span class="string">&#x27;ordered&#x27;</span> &#125;, &#123; <span class="string">&#x27;list&#x27;</span>: <span class="string">&#x27;bullet&#x27;</span> &#125;],<span class="comment">//列表</span></span><br><span class="line">      [&#123; <span class="string">&#x27;script&#x27;</span>: <span class="string">&#x27;sub&#x27;</span> &#125;, &#123; <span class="string">&#x27;script&#x27;</span>: <span class="string">&#x27;super&#x27;</span> &#125;],<span class="comment">// 上下标</span></span><br><span class="line">      [&#123; <span class="string">&#x27;indent&#x27;</span>: <span class="string">&#x27;-1&#x27;</span> &#125;, &#123; <span class="string">&#x27;indent&#x27;</span>: <span class="string">&#x27;+1&#x27;</span> &#125;], <span class="comment">// 缩进</span></span><br><span class="line">      [&#123; <span class="string">&#x27;direction&#x27;</span>: <span class="string">&#x27;rtl&#x27;</span> &#125;],<span class="comment">// 文本方向</span></span><br><span class="line">      [&#123; <span class="string">&#x27;size&#x27;</span>: [<span class="string">&#x27;small&#x27;</span>, <span class="literal">false</span>, <span class="string">&#x27;large&#x27;</span>, <span class="string">&#x27;huge&#x27;</span>] &#125;],<span class="comment">// 字体大小</span></span><br><span class="line">      [&#123; <span class="string">&#x27;header&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="literal">false</span>] &#125;],<span class="comment">//几级标题</span></span><br><span class="line">      [&#123; <span class="string">&#x27;color&#x27;</span>: [] &#125;, &#123; <span class="string">&#x27;background&#x27;</span>: [] &#125;], <span class="comment">// 字体颜色，字体背景颜色</span></span><br><span class="line">      [&#123; <span class="string">&#x27;font&#x27;</span>: [] &#125;], <span class="comment">//字体</span></span><br><span class="line">      [&#123; <span class="string">&#x27;align&#x27;</span>: [] &#125;],<span class="comment">//对齐方式</span></span><br><span class="line">      [<span class="string">&#x27;clean&#x27;</span>], <span class="comment">//清除字体样式</span></span><br><span class="line">      <span class="comment">// [&#x27;image&#x27;, &#x27;video&#x27;] //上传图片、上传视频</span></span><br><span class="line">      [<span class="string">&#x27;image&#x27;</span>]<span class="comment">//上传图片、上传视频</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">theme</span>: <span class="string">&#x27;snow&#x27;</span><span class="comment">//主题配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、关于富文本设置图片上传"><a href="#二、关于富文本设置图片上传" class="headerlink" title="二、关于富文本设置图片上传"></a><strong>二、关于富文本设置图片上传</strong></h2><p>需要注册富文本框，将富文本框的图片上传事件拦截改为自定义上传的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imgHandler = <span class="keyword">await</span> <span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// myQuillEditor</span></span><br><span class="line">vm.addImgRange = vm.$refs.myQuillEditor.quill.getSelection();</span><br><span class="line">  <span class="keyword">if</span> (image) &#123;        </span><br><span class="line">      <span class="keyword">var</span> fileInput = <span class="built_in">document</span>.getElementById(vm.uniqueId);</span><br><span class="line">        fileInput.click();</span><br><span class="line">        <span class="comment">//自定义上传点击事件</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;11111&quot;</span>, <span class="built_in">this</span>, vm.$refs);</span><br><span class="line"><span class="comment">//拦截富文本框的图片上传事件，改为自定义上传</span></span><br><span class="line">vm.$refs.myQuillEditor.quill</span><br><span class="line">          .getModule(<span class="string">&quot;toolbar&quot;</span>)</span><br><span class="line">          .addHandler(<span class="string">&quot;image&quot;</span>, imgHandler);</span><br></pre></td></tr></table></figure><p>上传的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fchangeFile</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">      <span class="keyword">var</span> suffix = <span class="string">&quot;image/jpg,image/jpeg,image/png,image/bmp&quot;</span>.toLowerCase();</span><br><span class="line">      <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(_this.uniqueId).files[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="keyword">if</span> (suffix.indexOf(file.type.toLowerCase()) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _this.$message.error(<span class="string">&quot;不支持该文件类型的上传！&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      formData.append(file.name, file);</span><br><span class="line">       _this.addImgRange = _this.$refs.myQuillEditor.quill.getSelection();</span><br><span class="line">      <span class="keyword">var</span> ind = _this.addImgRange.index;</span><br><span class="line">      <span class="built_in">this</span>.$api.uploadFile(formData).then(</span><br><span class="line">        <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(data);</span><br><span class="line">          <span class="built_in">this</span>.imageUrl = data[<span class="number">0</span>].url;</span><br><span class="line">          <span class="built_in">this</span>.content = <span class="built_in">this</span>.content + <span class="string">&quot;&lt;img src=&#x27;&quot;</span> + <span class="built_in">this</span>.imageUrl + <span class="string">&quot;&#x27;/&gt;&quot;</span>;</span><br><span class="line">          <span class="built_in">document</span>.getElementById(_this.uniqueId).value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">          <span class="comment">//把光标定位到输入内容的后面</span></span><br><span class="line">          _this.$refs.myQuillEditor.quill.insertEmbed(</span><br><span class="line">            _this.addImgRange != <span class="literal">null</span> ? <span class="built_in">parseInt</span>(_this.addImgRange.index) : <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;image&quot;</span>,</span><br><span class="line">            <span class="built_in">this</span>.imageUrl,</span><br><span class="line">            Quill.sources.USER</span><br><span class="line">          );</span><br><span class="line">          _this.$refs.myQuillEditor.quill.setSelection(</span><br><span class="line">            <span class="built_in">parseInt</span>(_this.addImgRange.index) + <span class="number">2</span></span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">document</span>.getElementById(_this.uniqueId).value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">          <span class="comment">//把光标定位到输入内容的后面</span></span><br><span class="line">          _this.$refs.myQuillEditor.quill.insertEmbed(</span><br><span class="line">            _this.addImgRange != <span class="literal">null</span> ? <span class="built_in">parseInt</span>(_this.addImgRange.index) : <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;image&quot;</span>,</span><br><span class="line">            <span class="built_in">this</span>.imageUrl,</span><br><span class="line">            Quill.sources.USER</span><br><span class="line">          );</span><br><span class="line">          <span class="comment">// console.log(&quot;测试 2：&quot;+(parseInt(_this.addImgRange.index)+3))</span></span><br><span class="line">          <span class="comment">//把光标定位到图片的后面</span></span><br><span class="line">          _this.$refs.myQuillEditor.quill.setSelection(</span><br><span class="line">            <span class="built_in">parseInt</span>(_this.addImgRange.index) + <span class="number">2</span></span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>注意：如果富文本框需要重复循环渲染的话，ref需要不同的ref，注册的事件也要分别注册，否则图片自定义的上传会出问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于vue-quil-deitor的富文本框&quot;&gt;&lt;a href=&quot;#基于vue-quil-deitor的富文本框&quot; class=&quot;headerlink&quot; title=&quot;基于vue-quil-deitor的富文本框&quot;&gt;&lt;/a&gt;&lt;strong&gt;基于vue-quil-d</summary>
      
    
    
    
    <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
    <category term="前端技术进阶" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6/"/>
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小程序-公众号跳转小程序</title>
    <link href="http://example.com/2021/12/16/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6-%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%85%AC%E4%BC%97%E5%8F%B7%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2021/12/16/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6-%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%85%AC%E4%BC%97%E5%8F%B7%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-12-16T12:22:12.000Z</published>
    <updated>2023-03-07T03:15:13.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="公众号跳转小程序"><a href="#公众号跳转小程序" class="headerlink" title="公众号跳转小程序"></a>公众号跳转小程序</h1><p>最近在做公众号跳转小程序的需求，用到了微信开放的标签，整理了一下整个设计的步骤以及需要注意的问题</p><h1 id="一、配置微信开放标签"><a href="#一、配置微信开放标签" class="headerlink" title="一、配置微信开放标签"></a><strong>一、配置微信开放标签</strong></h1><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a><strong>绑定域名</strong></h2><p>公众号身份的网页需要先绑定安全域名才可以，在微信公众平台进入公众号设置的功能设置里面填写上<strong>JS接口安全域名</strong>。</p><p>​     <img src="https://gitee.com/victory_na/my-img-host/raw/master/img/20220406101103.png">              </p><p><strong>注意：</strong></p><ul><li><strong>如果第一步的js安全域名没有设置的话后续测试的cofig是肯定配置不成功的</strong></li><li><strong>配置安全域名需要下载校验文件并且把校验文件放到当前项目服务器里</strong></li></ul><h2 id="引入js文件"><a href="#引入js文件" class="headerlink" title="引入js文件"></a><strong>引入js文件</strong></h2><p>在需要调用JS接口的页面引入如下JS文件：<a href="http://res.wx.qq.com/open/js/jweixin-1.6.0.js">http://res.wx.qq.com/open/js/jweixin-1.6.0.js</a> （支持https）</p><p>如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：<a href="http://res2.wx.qq.com/open/js/jweixin-1.6.0.js">http://res2.wx.qq.com/open/js/jweixin-1.6.0.js</a> （支持https）</p><h2 id="通过cofig配置权限验证以及开放的标签列表和需要使用的js接口列表"><a href="#通过cofig配置权限验证以及开放的标签列表和需要使用的js接口列表" class="headerlink" title="通过cofig配置权限验证以及开放的标签列表和需要使用的js接口列表"></a><strong>通过cofig配置权限验证以及开放的标签列表和需要使用的js接口列表</strong></h2><p>在config接口里面需要配置签名，appId等校验配置信息，也可以在这里配置好需要用到的JS接口以及需要用到的开放标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印</span></span><br><span class="line">  <span class="attr">appId</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">  <span class="attr">timestamp</span>: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">  nonceStr: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">  <span class="attr">signature</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">  <span class="attr">jsApiList</span>: [<span class="string">&quot;onMenuShareTimeline&quot;</span>,<span class="string">&quot;checkJsApi&quot;</span>,<span class="string">&quot;scanQRCode&quot;</span>], <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">  <span class="attr">openTagList</span>: [<span class="string">&#x27;wx-open-launch-weapp&#x27;</span>] <span class="comment">// 可选，需要使用的开放标签列表，例如[&#x27;wx-open-launch-app&#x27;]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>详情签名算法可以看附录</strong></p><p><strong>如果出现签名校验等不成功的多半是js安全域名没有配置</strong></p><h2 id="通过ready接口处理成功验证"><a href="#通过ready接口处理成功验证" class="headerlink" title="通过ready接口处理成功验证"></a><strong>通过ready接口处理成功验证</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(function () &#123;</span><br><span class="line">  // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><h2 id="通过error接口处理失败验证"><a href="#通过error接口处理失败验证" class="headerlink" title="通过error接口处理失败验证"></a><strong>通过error接口处理失败验证</strong></h2></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.error(function (res) &#123;</span><br><span class="line">  // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="二、使用微信开放标签"><a href="#二、使用微信开放标签" class="headerlink" title="二、使用微信开放标签"></a><strong>二、使用微信开放标签</strong></h1><h2 id="wx-open-launch-weapp"><a href="#wx-open-launch-weapp" class="headerlink" title="wx-open-launch-weapp"></a><strong>wx-open-launch-weapp</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;wx-open-launch-weapp</span><br><span class="line">  id=<span class="string">&quot;launch-btn&quot;</span></span><br><span class="line">  username=<span class="string">&quot;gh_xxxxxxxx&quot;</span></span><br><span class="line">  path=<span class="string">&quot;pages/home/index?user=123&amp;action=abc&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.btn</span> &#123; <span class="attribute">padding</span>: <span class="number">12px</span> &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>打开小程序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/wx-open-launch-weapp&gt;</span><br></pre></td></tr></table></figure><p>标签中的属性</p><ul><li>id=”launch-btn”   –标签的id</li><li>username=”gh_xxxxxxxx”  – 所需跳转的小程序的原始id，gh开头的那个</li><li>path=”pages/home/index?user=123&amp;action=abc” – 需要跳转小程序内的页面路径以及参数</li></ul><p><strong>注意：</strong></p><ol><li><script type=“text/wxtag-template”></script> vue需要用这个，因为template被vue直接解析掉了，在页面中闪了一下，按钮就消失不见了。<template></template> 其他用这个</li><li><strong>这个在浏览器微信开发者工具中，标签如果不显示是正常的，需要在真机公众号环境中才会显示</strong></li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a><strong>附录</strong></h1><h2 id="签名算法"><a href="#签名算法" class="headerlink" title="签名算法"></a><strong>签名算法</strong></h2><p>参与签名的字段包括</p><ul><li>noncestr（随机字符串</li><li>有效的jsapi_ticket,</li><li>timestamp（时间戳</li><li>url（当前网页的URL，不包含#及其后面部分。</li></ul><p>对所有待签名参数按照字段名的ASCII 码从小到大排序（字典序）后，使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串string1。这里需要注意的是所有参数名均为小写字符。对string1作sha1加密，字段名和字段值都采用原始值，不进行URL 转义。</p><p>即signature=sha1(string1)。 示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">noncestr=Wm3WZYTPz0wzccnW</span><br><span class="line">jsapi_ticket=sM4AOVdWfPE4DxkXGEs8VMCPGGVi4C3VM0P37wVUCFvkVAy_90u5h9nbSlYy3-Sl-HhTdfl2fzFy1AOcHKP7qg</span><br><span class="line">timestamp=1414587457</span><br><span class="line">url=http://mp.weixin.qq.com?params=value</span><br></pre></td></tr></table></figure><p>步骤1. 对所有待签名参数按照字段名的ASCII 码从小到大排序（字典序）后，使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串string1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsapi_ticket=sM4AOVdWfPE4DxkXGEs8VMCPGGVi4C3VM0P37wVUCFvkVAy_90u5h9nbSlYy3-Sl-HhTdfl2fzFy1AOcHKP7qg&amp;noncestr=Wm3WZYTPz0wzccnW&amp;timestamp=1414587457&amp;url=http://mp.weixin.qq.com?params=value</span><br></pre></td></tr></table></figure><p>步骤2. 对string1进行sha1签名，得到signature：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0f9de62fce790f9a083d5c99e95740ceb90c27ed</span><br></pre></td></tr></table></figure><p>注意事项</p><ol><li>签名用的noncestr和timestamp必须与wx.config中的nonceStr和timestamp相同。</li><li>签名用的url必须是调用JS接口页面的完整URL。</li><li>出于安全考虑，开发者必须在服务器端实现签名的逻辑。</li></ol><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><strong>官方文档</strong></h2><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html">微信开放标签官方文档</a></p><p><a href="https://developers.weixin.qq.com/community/minihome/doc/0004462fed03f86f495b885015ec00">配置JS安全域名遇到问题</a></p><p><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign">微信 JS 接口签名校验工具</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;公众号跳转小程序&quot;&gt;&lt;a href=&quot;#公众号跳转小程序&quot; class=&quot;headerlink&quot; title=&quot;公众号跳转小程序&quot;&gt;&lt;/a&gt;公众号跳转小程序&lt;/h1&gt;&lt;p&gt;最近在做公众号跳转小程序的需求，用到了微信开放的标签，整理了一下整个设计的步骤以及需要注意的</summary>
      
    
    
    
    <category term="小程序" scheme="http://example.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="前端技术进阶" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6/"/>
    
    <category term="小程序" scheme="http://example.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序-websocket</title>
    <link href="http://example.com/2021/08/31/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6-%E5%B0%8F%E7%A8%8B%E5%BA%8F-webSocket/"/>
    <id>http://example.com/2021/08/31/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6-%E5%B0%8F%E7%A8%8B%E5%BA%8F-webSocket/</id>
    <published>2021-08-31T14:16:52.000Z</published>
    <updated>2023-03-07T03:14:58.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序webSocket"><a href="#微信小程序webSocket" class="headerlink" title="微信小程序webSocket"></a>微信小程序webSocket</h1><h2 id="1-webSocket"><a href="#1-webSocket" class="headerlink" title="1.webSocket"></a>1.webSocket</h2><p>微信原生webSocket接口对于开发wx小程序非常方便，通过 WebSocket 连接发送数据。需要先 wx.connectSocket，并在 wx.onSocketOpen 回调之后才能发送。</p><h3 id="wx-connectSocket-Object-object"><a href="#wx-connectSocket-Object-object" class="headerlink" title="wx.connectSocket(Object object)"></a>wx.connectSocket(Object object)</h3><p>api:</p><ul><li><font style="color:red">url</font>：wss接口地址</li><li>header：http的jeader</li><li>protocols：子协议数组</li><li>timeout：超时时间</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wx.connectSocket(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;wss://example.qq.com&#x27;</span>,</span><br><span class="line">  <span class="attr">header</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">protocols</span>: [<span class="string">&#x27;protocol1&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="wx-sendSocketMessage-Object-object"><a href="#wx-sendSocketMessage-Object-object" class="headerlink" title="wx.sendSocketMessage(Object object)"></a>wx.sendSocketMessage(Object object)</h3><p>api:</p><ul><li><font style="color:red">data</font>:需要发送的内容</li><li>success：接口调用成功的回调函数</li><li>fail：接口调用失败的回调函数</li><li>complete：接口调用结束的回调函数（成功失败都会调用）</li></ul><h3 id="wx-onSocketOpen（function-callback）"><a href="#wx-onSocketOpen（function-callback）" class="headerlink" title="wx.onSocketOpen（function callback）"></a>wx.onSocketOpen（function callback）</h3><p>里面的回调函数是连接打开后的事件回调函数</p><h3 id="wx-onSocketClose（function-callback）"><a href="#wx-onSocketClose（function-callback）" class="headerlink" title="wx.onSocketClose（function callback）"></a>wx.onSocketClose（function callback）</h3><p>连接关闭事件的回调函数有个res里面有两个参数，code代表关闭连接的状态号，reason表示关闭的原因</p><h3 id="wx-onSocketError（function-callback）"><a href="#wx-onSocketError（function-callback）" class="headerlink" title="wx.onSocketError（function callback）"></a>wx.onSocketError（function callback）</h3><p>WebSocket 错误事件的回调函数</p><h3 id="wx-onSocketMessage（function-callback）"><a href="#wx-onSocketMessage（function-callback）" class="headerlink" title="wx.onSocketMessage（function callback）"></a>wx.onSocketMessage（function callback）</h3><p>WebSocket 接受到服务器的消息事件的回调函数</p><h2 id="2-一个接收数据的例子"><a href="#2-一个接收数据的例子" class="headerlink" title="2.一个接收数据的例子"></a>2.一个接收数据的例子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scoket;<span class="comment">//定义一个socket</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connectWxSocket</span>(<span class="params">token</span>)</span>&#123;<span class="comment">//</span></span><br><span class="line">  scoket = wx.connectSocket(&#123;</span><br><span class="line">    <span class="comment">// url: `$&#123;globalConfig.getLocalConfig().socketUrl&#125;/webSocket/$&#123;token&#125;`</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">`ws://82.157.123.54:9010/ajaxchattest`</span></span><br><span class="line">  &#125;)<span class="comment">//scoket的地址</span></span><br><span class="line">  <span class="comment">//打开socket</span></span><br><span class="line">  wx.onSocketOpen(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    log(<span class="string">&quot;WebSocket opened&quot;</span>,<span class="string">&quot;green&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//监听连接关闭事件</span></span><br><span class="line">  wx.onSocketClose(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    log(<span class="string">&quot;WebSocket close&quot;</span>,<span class="string">&quot;red&quot;</span>,res)</span><br><span class="line">    <span class="keyword">if</span>(res.code !== <span class="number">1000</span>)&#123;</span><br><span class="line">      wx.connectSocket(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;globalConfig.getLocalConfig().socketUrl&#125;</span>/webSocket/<span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//监听并处理error事件</span></span><br><span class="line">  wx.onSocketError(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    log(<span class="string">&quot;WebSocket error&quot;</span>,<span class="string">&quot;red&quot;</span>,err)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//接听服务器发回的信息并处理</span></span><br><span class="line">  wx.onSocketMessage(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(res.data)</span><br><span class="line">    log(<span class="string">&quot;WebSockt 收到消息&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="built_in">JSON</span>.parse(res.data))</span><br><span class="line">    messageHandle(res.data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对服务器发回的信息进行处理并且弹框显示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messageHandle</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="built_in">JSON</span>.parse(message)</span><br><span class="line">  msg.sendBean=&#123;<span class="attr">consultType</span>:<span class="number">1</span>,<span class="attr">consultId</span>: <span class="string">&quot;3672b906b55042b7a50b3ba3de5066c5&quot;</span>&#125;</span><br><span class="line">  <span class="keyword">if</span>(msg.sendBean &amp;&amp; msg.sendBean.consultType)&#123;</span><br><span class="line">    wx.showModal(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&#x27;来消息了来消息了耶~&#x27;</span>,</span><br><span class="line">      <span class="attr">confirmText</span>: <span class="string">&#x27;接受&#x27;</span>,</span><br><span class="line">      <span class="attr">showCancel</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">cancel</span>:<span class="string">&quot;拒绝&quot;</span>,</span><br><span class="line">      success (res) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;用户点击接受&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.cancel) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;用户点击拒绝&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg,color,res=<span class="string">&quot;&quot;</span></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`%c<span class="subst">$&#123;msg&#125;</span>`</span>,<span class="string">`background-color:<span class="subst">$&#123;color&#125;</span>;color: white; padding: 0.3em 0.5em;`</span>,res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  connectWxSocket</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="C:\Users\shenglina\AppData\Roaming\Typora\typora-user-images\image-20210831193107000.png" alt="image-20210831193107000" style="zoom:300%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微信小程序webSocket&quot;&gt;&lt;a href=&quot;#微信小程序webSocket&quot; class=&quot;headerlink&quot; title=&quot;微信小程序webSocket&quot;&gt;&lt;/a&gt;微信小程序webSocket&lt;/h1&gt;&lt;h2 id=&quot;1-webSocket&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="小程序" scheme="http://example.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="前端技术进阶" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6/"/>
    
    <category term="小程序" scheme="http://example.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>css-弹性盒</title>
    <link href="http://example.com/2020/10/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-css-%E5%BC%B9%E6%80%A7%E7%9B%92/"/>
    <id>http://example.com/2020/10/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-css-%E5%BC%B9%E6%80%A7%E7%9B%92/</id>
    <published>2020-10-18T10:41:10.000Z</published>
    <updated>2023-03-07T03:14:34.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css3弹性盒"><a href="#css3弹性盒" class="headerlink" title="css3弹性盒"></a>css3弹性盒</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>弹性盒子是CSS3的一种新布局模式。</p><p>CSS3 弹性盒（ Flexible Box 或 flexbox），是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。</p><p>引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。</p><h3 id="盒子内容"><a href="#盒子内容" class="headerlink" title="盒子内容"></a>盒子内容</h3><p>弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成。</p><p>弹性容器通过设置 display 属性的值为 flex 或 inline-flex将其定义为弹性容器。</p><p>弹性容器内包含了一个或多个弹性子元素。</p><p><strong>注意：</strong> 弹性容器外及弹性子元素内是正常渲染的。弹性盒子只定义了弹性子元素如何在弹性容器内布局。</p><p>弹性子元素通常在弹性盒子内一行显示。默认情况每个容器只有一行。</p><p>以下元素展示了弹性子元素在一行内显示，从左到右:</p><h2 id="二、CSS3-弹性盒子常用属性"><a href="#二、CSS3-弹性盒子常用属性" class="headerlink" title="二、CSS3 弹性盒子常用属性"></a>二、CSS3 弹性盒子常用属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>flex-direction</td><td>指定弹性容器中子元素排列方式</td></tr><tr><td>flex-wrap</td><td>设置弹性盒子的子元素超出父容器时是否换行</td></tr><tr><td>flex-flow</td><td>flex-direction 和 flex-wrap 的简写</td></tr><tr><td>align-items</td><td>设置弹性盒子元素在侧轴（纵轴）方向上的对齐方式</td></tr><tr><td>align-content</td><td>修改 flex-wrap 属性的行为，类似 align-items, 但不是设置子元素对齐，而是设置行对齐</td></tr><tr><td>justify-content</td><td>设置弹性盒子元素在主轴（横轴）方向上的对齐方式</td></tr></tbody></table><h3 id="1-flex-direction-属性"><a href="#1-flex-direction-属性" class="headerlink" title="1. flex-direction 属性"></a>1. flex-direction 属性</h3><p>flex-direction主要是决定项目的方向。</p><p><strong>注意：</strong>如果元素不是弹性盒对象的元素，则 flex-direction 属性不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123; <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse; &#125;</span><br></pre></td></tr></table></figure><p> <strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>row</td><td>默认值。元素将水平显示，正如一个行一样。</td></tr><tr><td>row-reverse</td><td>与 row 相同，但是以相反的顺序。</td></tr><tr><td>column</td><td>元素将垂直显示，正如一个列一样。</td></tr><tr><td>column-reverse</td><td>与 column 相同，但是以相反的顺序。</td></tr></tbody></table><p><img src="https://gitee.com/victory_na/my-img-host/raw/master/img/image-20220401134932215.png"></p><h3 id="2-align-items属性"><a href="#2-align-items属性" class="headerlink" title="2. align-items属性"></a>2. align-items属性</h3><p>align-items 属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>stretch</td><td>默认值。项目被拉伸以适应容器。</td></tr><tr><td>center</td><td>项目位于容器的中心。</td></tr><tr><td>flex-start</td><td>项目位于容器的开头。</td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td></tr><tr><td>baseline</td><td>项目位于容器的基线上。</td></tr></tbody></table><h3 id="3-justify-content属性"><a href="#3-justify-content属性" class="headerlink" title="3. justify-content属性"></a>3. justify-content属性</h3><p>justify-content 用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值。项目位于容器的开头。</td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td></tr><tr><td>center</td><td>项目位于容器的中心。</td></tr><tr><td>space-between</td><td>项目位于各行之间留有空白的容器内。</td></tr><tr><td>space-around</td><td>项目位于各行之前、之间、之后都留有空白的容器内。</td></tr></tbody></table><h3 id="4-flex-wrap-属性"><a href="#4-flex-wrap-属性" class="headerlink" title="4. flex-wrap 属性"></a>4. flex-wrap 属性</h3><p>flex-wrap 属性规定flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>nowrap</td><td>默认值。规定元素不拆行或不拆列。</td></tr><tr><td>wrap</td><td>规定元素在必要的时候拆行或拆列。</td></tr><tr><td>wrap-reverse</td><td>规定元素在必要的时候拆行或拆列，但是以相反的顺序。</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123; <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse; &#125;</span><br></pre></td></tr></table></figure><p>可以取三个值：<br>（1） nowrap (默认)：不换行。</p><p><img src="https://gitee.com/victory_na/my-img-host/raw/master/img/20220402135821.png" alt="img"></p><p>（2）wrap：换行，第一行在上方。</p><p><img src="https://gitee.com/victory_na/my-img-host/raw/master/img/20220402135847.png" alt="img"></p><p>（3）wrap-reverse：换行，第一行在下方。</p><p><img src="https://gitee.com/victory_na/my-img-host/raw/master/img/20220402135908.png" alt="img"></p><h3 id="5-flex-flow-属性"><a href="#5-flex-flow-属性" class="headerlink" title="5. flex-flow 属性"></a>5. flex-flow 属性</h3><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123; <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; &lt;flex-wrap&gt; &#125;</span><br></pre></td></tr></table></figure><h2 id="三、弹性子元素属性"><a href="#三、弹性子元素属性" class="headerlink" title="三、弹性子元素属性"></a>三、弹性子元素属性</h2><table><thead><tr><th>属     性</th><th>描述</th></tr></thead><tbody><tr><td>order</td><td>设置弹性盒子的子元素排列顺序。</td></tr><tr><td>flex-grow</td><td>设置或检索弹性盒子元素的扩展比率。</td></tr><tr><td>flex-shrink</td><td>指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。</td></tr><tr><td>flex-basis</td><td>用于设置或检索弹性盒伸缩基准值。</td></tr><tr><td>flex</td><td>设置弹性盒子的子元素如何分配空间。</td></tr><tr><td>align-self</td><td>在弹性子元素上使用。覆盖容器的 align-items 属性。</td></tr></tbody></table><h3 id="1-order属性"><a href="#1-order属性" class="headerlink" title="1. order属性"></a>1. order属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> <span class="selector-class">.flex-item</span> &#123; <span class="attribute">order</span>: &lt;integer&gt;; &#125;</span><br></pre></td></tr></table></figure><p><integer>：用整数值来定义<strong>排列顺序</strong>，数值小的排在前面。可以为负值，默认为0。</p><h3 id="2-flex-grow属性"><a href="#2-flex-grow属性" class="headerlink" title="2. flex-grow属性"></a>2. flex-grow属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> <span class="selector-class">.flex-item</span> &#123; <span class="attribute">flex-grow</span>: &lt;integer&gt;; &#125;</span><br></pre></td></tr></table></figure><p><integer>：一个数字，规定项目将相对于其他灵活的项目进行扩展的量。默认值是 0。</p><p><img src="https://gitee.com/victory_na/my-img-host/raw/master/img/20220402135928.png" alt="img"></p><h3 id="3-flex-shrink属性"><a href="#3-flex-shrink属性" class="headerlink" title="3. flex-shrink属性"></a>3. flex-shrink属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> <span class="selector-class">.flex-item</span> &#123; <span class="attribute">flex-shrink</span>: &lt;integer&gt;; &#125;</span><br></pre></td></tr></table></figure><p><integer>：一个数字，规定项目将相对于其他灵活的项目进行收缩的量。默认值是 1。</p><p><img src="https://gitee.com/victory_na/my-img-host/raw/master/img/20220402135943.png" alt="img"></p><h3 id="4-flex-basis属性"><a href="#4-flex-basis属性" class="headerlink" title="4. flex-basis属性"></a>4. flex-basis属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> <span class="selector-class">.flex-item</span> &#123; <span class="attribute">flex-basis</span>: &lt;integer&gt; | auto; &#125;</span><br></pre></td></tr></table></figure><p><integer>：一个长度单位或者一个百分比，规定元素的初始长度。<br>auto：默认值。长度等于元素的长度。如果该项目未指定长度，则长度将根据内容决定。</p><h3 id="5-flex属性"><a href="#5-flex属性" class="headerlink" title="5. flex属性"></a>5. flex属性</h3><p>flex 属性用于设置或检索弹性盒模型对象的子元素如何分配空间。</p><p>flex 属性是 flex-grow、flex-shrink 和 flex-basis 属性的简写属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> <span class="selector-class">.flex-item</span> &#123; <span class="attribute">flex</span>: flex-grow flex-shrink flex-basis | auto | initial | inherit; &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>flex-grow</td><td>一个数字，规定项目将相对于其他元素进行扩展的量。</td></tr><tr><td>flex-shrink</td><td>一个数字，规定项目将相对于其他元素进行收缩的量。</td></tr><tr><td>flex-basis</td><td>项目的长度。合法值：”auto”、”inherit” 或一个后跟 “%”、”px”、”em” 或任何其他长度单位的数字。</td></tr><tr><td>auto</td><td>与 1 1 auto 相同。</td></tr><tr><td>none</td><td>与 0 0 auto 相同。</td></tr><tr><td>initial</td><td>设置该属性为它的默认值，即为 0 1 auto。</td></tr><tr><td>inherit</td><td>从父元素继承该属性。</td></tr></tbody></table><h3 id="6-align-self属性"><a href="#6-align-self属性" class="headerlink" title="6. align-self属性"></a>6. align-self属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> <span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: auto | stretch | center | flex-start | flex-end | baseline | initial | inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>auto</td><td>默认值。元素继承了它的父容器的 align-items 属性。如果没有父容器则为 “stretch”。</td></tr><tr><td>stretch</td><td>元素被拉伸以适应容器。</td></tr><tr><td>center</td><td>元素位于容器的中心。</td></tr><tr><td>flex-start</td><td>元素位于容器的开头。</td></tr><tr><td>flex-end</td><td>元素位于容器的结尾。</td></tr><tr><td>baseline</td><td>元素位于容器的基线上。</td></tr><tr><td>initial</td><td>设置该属性为它的默认值。</td></tr><tr><td>inherit</td><td>从父元素继承该属性。</td></tr></tbody></table><p>取值同 align-items。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;css3弹性盒&quot;&gt;&lt;a href=&quot;#css3弹性盒&quot; class=&quot;headerlink&quot; title=&quot;css3弹性盒&quot;&gt;&lt;/a&gt;css3弹性盒&lt;/h1&gt;&lt;h2 id=&quot;一、概念&quot;&gt;&lt;a href=&quot;#一、概念&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="前端技术基础" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js-ES6新增</title>
    <link href="http://example.com/2020/09/30/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-js-ES6%E6%96%B0%E5%A2%9E/"/>
    <id>http://example.com/2020/09/30/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-js-ES6%E6%96%B0%E5%A2%9E/</id>
    <published>2020-09-30T14:50:11.000Z</published>
    <updated>2023-03-07T03:14:18.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6新增特性"><a href="#ES6新增特性" class="headerlink" title="ES6新增特性"></a>ES6新增特性</h1><h2 id="一、let和const"><a href="#一、let和const" class="headerlink" title="一、let和const"></a>一、let和const</h2><h4 id="1-let"><a href="#1-let" class="headerlink" title="1.let"></a>1.let</h4><ul><li>let 定义变量，变量不可以再次定义，但可以改变其值</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">name = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// lisi</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;wangwu&#x27;</span>; <span class="comment">// 再次定义，报错：Identifier &#x27;name&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><ul><li>具有块级作用域。（即大括号）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age); <span class="comment">// 18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 报错，此作用域中没有age的定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// i 只能在此范围内使用，因为有块级作用域</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);  <span class="comment">// 报错，此作用域中没有i的定义</span></span><br></pre></td></tr></table></figure><ul><li>没有变量提升，必须先定义再使用</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(gender); <span class="comment">// 报错，此时还没有定义gender</span></span><br><span class="line"><span class="keyword">let</span> gender = <span class="string">&#x27;男&#x27;</span>; </span><br></pre></td></tr></table></figure><ul><li>let声明的变量不会压到window对象中，是独立的</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hobby = <span class="string">&#x27;吃饭&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.hobby); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><strong>如果使用var声明了变量，也不能再次用let声明了，反之也是不行的。原因也是这个变量已经被声明过了。</strong></p><h4 id="2-const"><a href="#2-const" class="headerlink" title="2.const"></a>2.const</h4><ul><li>使用const关键字定义常量</li><li>常量是不可变的，一旦定义，则不能修改其值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用const关键字定义常量，常量名一般大写</span></span><br><span class="line"><span class="comment">// 2. 常量是不可变的，一旦定义，则不能修改其值</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span>；</span><br><span class="line">PI = <span class="number">3.14</span>; <span class="comment">// 报错，常用一旦被初始化，则不能被修改</span></span><br></pre></td></tr></table></figure><ul><li>初始化常量时，必须给初始值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI; </span><br><span class="line"><span class="comment">// 报错，Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><ul><li>具有块级作用域</li><li>没有变量提升，必须先定义再使用</li><li>常量也是独立的，定义后不会压入到window对象中</li></ul><h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h4><table><thead><tr><th align="left">关 键字</th><th align="left">变量提升</th><th align="left">块级作用域</th><th>更   改</th><th>通过window调用</th></tr></thead><tbody><tr><td align="left">let</td><td align="left">no</td><td align="left">yes</td><td>yes</td><td>no</td></tr><tr><td align="left">const</td><td align="left">no</td><td align="left">yes</td><td>no</td><td>no</td></tr><tr><td align="left">var</td><td align="left">yes</td><td align="left">no</td><td>yes</td><td>yes</td></tr></tbody></table><h2 id="二、解构赋值"><a href="#二、解构赋值" class="headerlink" title="二、解构赋值"></a>二、解构赋值</h2><h4 id="1-数组解构"><a href="#1-数组解构" class="headerlink" title="1.数组解构"></a>1.数组解构</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况1，变量和值一一对应</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c); <span class="comment">// 输出 5 9 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况2，变量多，值少</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, c, d] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c, d); <span class="comment">// 输出 5 9 10 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况3，变量少，值多</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 5, 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况4，按需取值</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [, , a, , b] = arr; <span class="comment">// 不需要用变量接收的值，用空位占位</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 10, 3 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况5，剩余值</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, ...c] = arr; <span class="comment">// ...c 接收剩余的其他值，得到的c是一个数组</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b, c); </span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// a = 5, </span></span><br><span class="line"><span class="comment">// b = 9, </span></span><br><span class="line"><span class="comment">// c = [10, 8, 3, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况6，复杂的情况，只要符合模式，即可解构</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">18</span>, [<span class="string">&#x27;175cm&#x27;</span>, <span class="string">&#x27;65kg&#x27;</span>]];</span><br><span class="line"><span class="keyword">let</span> [, , [a, b]] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 175cm 65kg</span></span><br></pre></td></tr></table></figure><h4 id="2-对象解构"><a href="#2-对象解构" class="headerlink" title="2.对象解构"></a>2.对象解构</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况1，默认要求变量名和属性名一样</span></span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123;<span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// aaa, bbb</span></span><br><span class="line"><span class="keyword">let</span> &#123;a, c&#125; = &#123;<span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;world&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a, c); <span class="comment">// hello, undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况2，可以通过:为变量改名</span></span><br><span class="line"><span class="keyword">let</span> &#123;a, <span class="attr">b</span>:c&#125; = &#123;<span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;world&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a, c); <span class="comment">// hello, world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况3，变量名和属性名一致即可获取到值，不一定要一一对应</span></span><br><span class="line"><span class="keyword">let</span> &#123;b&#125; = &#123;<span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;world&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// world</span></span><br><span class="line"><span class="comment">// 此时，没有定义变量a，所以使用a会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况4，剩余值</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>, <span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;name, ...a&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(name, a);</span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// name = zs</span></span><br><span class="line"><span class="comment">// a = &#123;age: 20, gender: &quot;男&quot;&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况5，复杂的情况，只要符合模式，即可解构</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">dog</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;毛毛&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">dog</span>: &#123;name, age&#125;&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(name, age); <span class="comment">// 毛毛 3</span></span><br></pre></td></tr></table></figure><h2 id="三、箭头函数"><a href="#三、箭头函数" class="headerlink" title="三、箭头函数"></a>三、箭头函数</h2><p>使用箭头定义函数 <code>=&gt; goes to</code>，目的是<strong>简化函数的定义</strong>并且里面的this也比较特殊。</p><p>基本定义：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非箭头函数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数，等同于上面的函数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>形参只有一个可以省略小括号</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数体只有一句话，可以省略大括号，并且表示返回函数体的内容</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</span><br></pre></td></tr></table></figure><ul><li>箭头函数内部没有 arguments</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// 报错，arguments is not defined</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>箭头函数内部的 <code>this</code> 指向外部作用域中的 <code>this</code> ，或者可以认为箭头函数没有自己的 <code>this</code></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里必须用var，因为用let声明的变量不能使用window调用</span></span><br><span class="line">   <span class="keyword">var</span> name = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">   <span class="keyword">let</span> obj = &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">       <span class="attr">fn</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window对象</span></span><br><span class="line">           <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// lisi</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   obj.fn();</span><br></pre></td></tr></table></figure><ul><li>箭头函数不能作为构造函数</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Person(); <span class="comment">// 报错，Person is not a constructor</span></span><br><span class="line"><span class="comment">// 箭头函数中都没有自己的this，不能处理成员，所以不能当构造函数</span></span><br></pre></td></tr></table></figure><h2 id="四、内置函数的扩展"><a href="#四、内置函数的扩展" class="headerlink" title="四、内置函数的扩展"></a>四、内置函数的扩展</h2><h4 id="1-扩展运算符：…"><a href="#1-扩展运算符：…" class="headerlink" title="1.扩展运算符：…"></a>1.扩展运算符：…</h4><p><code>...</code>可以把数组中的每一项展开</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并两个数组</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2];</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// 把数组展开作为参数，可以替代 apply</span></span><br><span class="line"><span class="comment">// 求数组的最大值</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">6</span>, <span class="number">99</span>, <span class="number">10</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...arr); <span class="comment">// 等同于 Math.max(6, 99, 10, 1);</span></span><br></pre></td></tr></table></figure><h4 id="2-find-方法和findIndex-方法"><a href="#2-find-方法和findIndex-方法" class="headerlink" title="2.find()方法和findIndex()方法"></a>2.find()方法和findIndex()方法</h4><p>find()：用于查找数组中的值<br> findIndex()：用于查找数组的下标，用法与find一样</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = [<span class="number">3</span>, <span class="number">5</span>, -<span class="number">1</span>, -<span class="number">4</span>, <span class="number">6</span>].find(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item); <span class="comment">//表示数组的每个值</span></span><br><span class="line">    <span class="built_in">console</span>.log(index); <span class="comment">//表示数组的每个下标</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr); <span class="comment">//表示整个数组</span></span><br><span class="line">    <span class="comment">//如果需要查找，要用到return 条件；</span></span><br><span class="line">    <span class="keyword">return</span> item &lt; <span class="number">0</span>; <span class="comment">//find方法会返回第一个满足条件的值，-1</span></span><br><span class="line">    <span class="comment">//如果是findIndex方法，会返回第一个满足条件的值的下标，2</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure><ul><li><strong>find</strong> 找到数组中第一个满足条件的成员并<strong>返回该成员</strong>，如果找不到返回<strong>undefined</strong>。</li><li><strong>findIndex</strong> 找到数组中第一个满足条件的成员并<strong>返回该成员的索引</strong>，如果找不到返回 <strong>-1</strong>。</li></ul><h4 id="3-includes-方法"><a href="#3-includes-方法" class="headerlink" title="3.includes()方法"></a>3.includes()方法</h4><ul><li>判断数组是否包含某个值，返回 true / false</li><li>参数1，必须，表示查找的内容</li><li>参数2，可选，表示开始查找的位置，0表示开头的位置</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">4</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">4</span>, <span class="number">2</span>)); <span class="comment">// false， 从2的位置开始查，所以没有找到4</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">5</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="5-includes"><a href="#5-includes" class="headerlink" title="5.includes()"></a>5.includes()</h4><p>includes(str, [position])  返回布尔值，表示是否找到了参数字符串</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>.includes(<span class="string">&#x27;e&#x27;</span>, <span class="number">2</span>)); <span class="comment">// false 从位置2开始查找e，没有找到</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>.includes(<span class="string">&#x27;e&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>.startsWith(<span class="string">&#x27;h&#x27;</span>)); <span class="comment">// 未指定位置，看开头是否是h，返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>.startsWith(<span class="string">&#x27;l&#x27;</span>, <span class="number">2</span>)); <span class="comment">// 指定位置的字符是l，返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>.endsWith(<span class="string">&#x27;d&#x27;</span>)); <span class="comment">// 未指定位置，结尾是d，返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>.endsWith(<span class="string">&#x27;r&#x27;</span>, <span class="number">9</span>)); <span class="comment">// 指定位置的字符是r，返回true</span></span><br></pre></td></tr></table></figure><h4 id="6-repeat-方法"><a href="#6-repeat-方法" class="headerlink" title="6.repeat()方法"></a>6.repeat()方法</h4><p><code>repeat</code>方法返回一个新字符串，表示将原字符串重复<code>n</code>次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> html = <span class="string">&#x27;&lt;li&gt;itheima&lt;/li&gt;&#x27;</span>;</span><br><span class="line">html = html.repeat(10);</span><br></pre></td></tr></table></figure><h2 id="五、新增对象Set"><a href="#五、新增对象Set" class="headerlink" title="五、新增对象Set"></a>五、新增对象Set</h2><p>数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。<br> <code>Set</code>本身是一个构造函数，用来生成 Set 数据结构。<br> Set的特点就是该对象里面的成员不会有重复。</p><p><strong>1.基本使用：</strong><br> <code>let set = new Set();</code> 得到一个空的Set对象。</p><p><strong>2.Set的成员</strong></p><ul><li><code>size</code>：属性，获取 <code>set</code> 中成员的个数，相当于数组中的 <code>length</code></li><li><code>add(value)</code>：添加某个值，返回 Set 结构本身。</li><li><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li><li><code>has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</li><li><code>clear()</code>：清除所有成员，没有返回值。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = <span class="keyword">new</span> Set();</span><br><span class="line"><span class="comment">//调用set对象内置的add方法，想set中添加数据。</span></span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">9</span>);</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">3</span>); <span class="comment">//添加失败但不报错，set中的成员不能重复</span></span><br><span class="line">console.log(<span class="keyword">set</span>); <span class="comment">// &#123;3,8,9&#125;</span></span><br><span class="line">console.log(<span class="keyword">set</span>.size); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>初始化Set的时候，也可以为其传入数组或字符串，得到的Set对象中的成员不会有重复。根据这个特点可以完成数组或字符串去重。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let set = new Set([4, 8, 9, 5, 4, 8, 4, 2]);</span><br><span class="line">console.log(set); //Set(5) &#123;4,8,9,5,2&#125;</span><br><span class="line">let arr = [...set]; //将set中的每个值展开，然后放到数组中</span><br><span class="line">console.log(arr); //(5) [4, 8, 9, 5, 2]</span><br><span class="line">let str = new Set(&#x27;abcdacbdcbac&#x27;); </span><br><span class="line">console.log(str); //Set(4) &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;&#125;</span><br><span class="line">console.log([...str].join(&#x27;&#x27;)); //abcd</span><br></pre></td></tr></table></figure><h2 id="六、promise"><a href="#六、promise" class="headerlink" title="六、promise"></a>六、promise</h2><p>Promise是异步编程的一种解决方案，它有三种状态，分别是<strong>pending-进行中</strong>、<strong>resolved-已完成</strong>、<strong>rejected-已失败</strong></p><p>当Promise的状态又pending转变为resolved或rejected时，会执行相应的方法，并且状态一旦改变，就无法再次改变状态，这也是它名字promise-承诺的由来</p><p>具体可看<a href="https://victory-na.github.io/2020/10/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-js-%E5%BC%B9%E6%80%A7%E7%9B%92/">promise详解</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6新增特性&quot;&gt;&lt;a href=&quot;#ES6新增特性&quot; class=&quot;headerlink&quot; title=&quot;ES6新增特性&quot;&gt;&lt;/a&gt;ES6新增特性&lt;/h1&gt;&lt;h2 id=&quot;一、let和const&quot;&gt;&lt;a href=&quot;#一、let和const&quot; class=&quot;he</summary>
      
    
    
    
    <category term="js" scheme="http://example.com/categories/js/"/>
    
    
    <category term="前端技术基础" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js-js数组常用方法</title>
    <link href="http://example.com/2020/09/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-js-%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2020/09/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-js-%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2020-09-02T13:11:46.000Z</published>
    <updated>2023-03-07T03:14:13.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js数组常用方法"><a href="#js数组常用方法" class="headerlink" title="js数组常用方法"></a>js数组常用方法</h1><h2 id="一、数组常用方法"><a href="#一、数组常用方法" class="headerlink" title="一、数组常用方法"></a>一、数组常用方法</h2><ul><li>concat()–合并数组</li><li>join()–使用分隔符将数组转为字符串</li><li>pop()–删除最后一位</li><li>shift()–删除第一位</li><li>unshift()–在第一位新增数据</li><li>push()–在最后一位新增数据</li><li>reverse()–反转数组</li><li>sort()–排序</li><li>slice()–截取指定位置的数组</li><li>splice()–删除指定位置，替换</li><li>toString()–直接转为字符串</li><li>IndexOf()–查询并返回数据的索引</li><li>forEach()–遍历数组</li><li>map()–遍历数组回调返回数据</li><li>filter()–过滤数组</li><li>every()–遍历数组，全部为true返回true</li><li>some()–遍历数组，只要有一个为true，返回true</li></ul><h2 id="二、数组常用方法解析"><a href="#二、数组常用方法解析" class="headerlink" title="二、数组常用方法解析"></a>二、数组常用方法解析</h2><h3 id="1、concat"><a href="#1、concat" class="headerlink" title="1、concat()"></a>1、concat()</h3><blockquote><p>功能：<strong>合并数组</strong>，可以合并一个或多个数组，会返回合并数组之后的数据，<strong>不会改变原来的数组</strong>；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>];<span class="keyword">var</span> str2 = [<span class="string">&quot;world&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.concat(str2));　　　　　　　　<span class="comment">//[12, 2, &quot;hello&quot;, &quot;world&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　　　<span class="comment">//[12,2,&quot;hello&quot;];</span></span><br></pre></td></tr></table></figure><h3 id="2、join"><a href="#2、join" class="headerlink" title="2、join()"></a>2、join()</h3><blockquote><p>功能：将数组转为字符串并返回转化的字符串数据，<strong>不会改变原来的数组；</strong></p></blockquote><p>注意：()中用双引号包括自己想用的分隔符，默认为逗号　</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="string">&quot;world&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.join(<span class="string">&quot;-&quot;</span>));　　　　　　　　<span class="comment">//12-2-hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　<span class="comment">//[12, 2, &quot;hello&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="3、pop"><a href="#3、pop" class="headerlink" title="3、pop()"></a>3、pop()</h3><blockquote><p>功能：<strong>删除数组的最后一位</strong>，并且<strong>返回删除的数据，会改变原来的数组</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.pop()　　　　　　　　<span class="comment">//hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　<span class="comment">//[12, 2]</span></span><br></pre></td></tr></table></figure><h3 id="4、shift"><a href="#4、shift" class="headerlink" title="4、shift()"></a>4、shift()</h3><blockquote><p>功能：<strong>删除数组的第一位数据</strong>，并且<strong>返回删除的数据，会改变原来的数组</strong>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.shift()　　　　　　　　<span class="comment">//hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　<span class="comment">//[2,&quot;hello&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="5、unshift"><a href="#5、unshift" class="headerlink" title="5、unshift()"></a>5、unshift()</h3><blockquote><p>功能：在数组的<strong>首位新增一个或多数据</strong>，并且<strong>返回新数组的长度，会改变原来的数组</strong></p></blockquote><p>注意：<code>unshift()</code>方法返回的数据是新数组的长度，它增加的数据可以是一个也可以是多个，可以理解为增加一连串的数据，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">43</span>,<span class="number">2</span>,<span class="string">&quot;test&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.unshift(<span class="string">&quot;你好&quot;</span>));　　　　　　　　　　　　　　<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.unshift(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>));　　　　　　　　<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//[&quot;你好&quot;, 12, 2, &quot;hello&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);　　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//[&quot;hello&quot;, &quot;world&quot;, 43, 2, &quot;test&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="6、push"><a href="#6、push" class="headerlink" title="6、push()"></a>6、push()</h3><blockquote><p>功能：在数组的最后一位新增一个或多个数据，并且返回新数组的长度，会改变原来的数组</p></blockquote><p>注意：push()方法返回的是数据是新数组的长度，它增加的数据可以是一个也可以是多个，可以理解为增加一连串的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">43</span>,<span class="number">2</span>,<span class="string">&quot;test&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.push(<span class="string">&quot;你好&quot;</span>));　　　　　　　　　　<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.push(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>));　　　　<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　　　　<span class="comment">//[12, 2, &quot;hello&quot;,&quot;你好&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);　　　　　　　　　　　　　　　　　<span class="comment">//[43, 2, &quot;test&quot;,&quot;hello&quot;, &quot;world&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="7、reverse"><a href="#7、reverse" class="headerlink" title="7、reverse()"></a>7、reverse()</h3><blockquote><p>功能：将数组的数据进行反转，并且返回反转后的数组，会改变原数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.reverse());　　　　　　<span class="comment">//[&quot;hello&quot;, 2, 12]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　<span class="comment">//[&quot;hello&quot;, 2, 12]</span></span><br></pre></td></tr></table></figure><h3 id="8、sort"><a href="#8、sort" class="headerlink" title="8、sort()"></a>8、sort()</h3><blockquote><p>功能：对数组内的数据进行排序(默认为升序)，并且返回排过序的新数组，会改变原来的数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="number">43</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">92</span>,<span class="number">2</span>,<span class="number">43</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&#x27;zoom&#x27;</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.sort());<span class="comment">//[12, 2, 2, 43, 5, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);<span class="comment">//[12, 2, 2, 43, 5, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.sort());<span class="comment">//[2, 2, 43, 5, 5, 92, &quot;abc&quot;, &quot;hello&quot;, &quot;zoom&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);<span class="comment">//[2, 2, 43, 5, 5, 92, &quot;abc&quot;, &quot;hello&quot;, &quot;zoom&quot;]</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这里的排序是<code>针对字符的排序</code>，先使用数组的<code>toString()</code>方法转为字符串，再逐位比较，3是大于12的，因为首位<code>3&gt;1</code>，不要与<code>Number</code>型的数据排序混淆</li><li><code>str2</code>数组中增加了三个字符，可以看到，比较的时候，<code>zoom</code>是最大的，因为首位的英文字母通过<code>ASCII</code>码可以转为相应的数值，再根据数值比较</li><li>排序问题</li></ul><p>参数：<code>sort(callback)</code> 如果需要按照数值排序，需要传参。<code>sort(callback)</code>，<code>callback</code>为回调函数，该函数应该具有两个参数，比较这两个参数，然后返回一个用于说明这两个值的相对顺序的数字<code>（a-b）</code>。其返回值如下：</p><p>若 a 小于 b，返回一个小于 0 的值。</p><p>若 a 等于 b，则返回 0。</p><p>若 a 大于 b，则返回一个大于 0 的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str3 = [<span class="number">92</span>,<span class="number">2</span>,<span class="number">43</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];     </span><br><span class="line"><span class="built_in">console</span>.log(str3.sort(fn));　　　　　　　　　　　　　　　　　<span class="comment">//[2, 2, 5, 5, 43, 92]</span></span><br><span class="line"><span class="built_in">console</span>.log(str3);　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//[2, 2, 5, 5, 43, 92]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">return</span> a-b;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="9、slice"><a href="#9、slice" class="headerlink" title="9、slice()"></a>9、slice()</h3><blockquote><p>功能：截取指定位置的数组，并且返回截取的数组，不会改变原数组</p></blockquote><p>参数：<code>slice(startIndex, endIndex)</code></p><p>注意：可从已有的数组中返回选定的元素。该方法接收两个参数<code>slice(start,end)</code>，<code>stsrt</code>为必选，表示从第几位开始；<code>end</code>为可选，表示到第几位结束(不包含end位)，省略表示到最后一位；start和end都可以为负数，负数时表示从最后一位开始算起，如-1表示最后一位。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;T1&quot;</span>,<span class="string">&quot;J1&quot;</span>,<span class="string">&quot;L1&quot;</span>,<span class="string">&quot;L2&quot;</span>,<span class="string">&quot;M1&quot;</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">3</span>));        <span class="comment">//[&quot;J1&quot;,&quot;L1&quot;]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>));          <span class="comment">//[&quot;J1&quot;,&quot;L1&quot;,&quot;L2&quot;,&quot;M1&quot;]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(-<span class="number">4</span>,-<span class="number">1</span>));      <span class="comment">//[&quot;J1&quot;,&quot;L1&quot;,&quot;L2&quot;]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(-<span class="number">2</span>));         <span class="comment">//[&quot;Lily&quot;,&quot;M1&quot;]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,-<span class="number">2</span>));       <span class="comment">//[&quot;J1&quot;,&quot;L1&quot;]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);                   <span class="comment">//[&quot;T1&quot;,&quot;J1&quot;,&quot;L1&quot;,&quot;L2&quot;,&quot;M1&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="10、splice"><a href="#10、splice" class="headerlink" title="10、splice()"></a>10、splice()</h3><blockquote><p>功能：向数组中添加，或从数组删除，或替换数组中的元素，然后返回被删除/替换的元素。</p></blockquote><p>参数：<code>splice(start,num,data1,data2,...)</code>; 所有参数全部可选。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>));<span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[&quot;Tom&quot;, &quot;Jack&quot;, &quot;a&quot;, &quot;b&quot;, &quot;Lucy&quot;, &quot;Lily&quot;, &quot;May&quot;]---原数组改变</span></span><br></pre></td></tr></table></figure><h3 id="11、toString"><a href="#11、toString" class="headerlink" title="11、toString()"></a>11、toString()</h3><blockquote><p>功能：将数组转换成字符串，<code>类似于没有参数的join()</code>。该方法会在数据发生隐式类型转换时被自动调用，如果手动调用，就是直接转为字符串。不会改变原数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str.toString()); <span class="comment">//1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><h3 id="12、IndexOf"><a href="#12、IndexOf" class="headerlink" title="12、IndexOf()"></a>12、IndexOf()</h3><blockquote><p>功能：根据指定的数据，从左向右，查询在数组中出现的位置，如果不存在指定的数据，返回-1，找到了指定的数据返回该数据的索引</p></blockquote><p>参数：indexOf(value, start);value为要查询的数据；start为可选，表示开始查询的位置，当start为负数时，从数组的尾部向前数；如果查询不到value的存在，则方法返回-1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注意：如果找到该数据，立即返回该数据的索引，不再往后继续查找</span><br><span class="line">var str = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;];</span><br><span class="line"> console.log(str.indexOf(&quot;l&quot;));        //2</span><br><span class="line"> console.log(str.indexOf(&quot;l&quot;,3));      //3</span><br><span class="line"> console.log(str.indexOf(&quot;l&quot;,4));      //-1</span><br><span class="line"> console.log(str.indexOf(&quot;l&quot;,-1));     //-1</span><br><span class="line"> console.log(str.indexOf(&quot;l&quot;,-3));     //2</span><br></pre></td></tr></table></figure><h3 id="13、forEach"><a href="#13、forEach" class="headerlink" title="13、forEach()"></a>13、forEach()</h3><blockquote><p>功能：ES5新增的方法，用来遍历数组，没有返回值，</p></blockquote><p>参数：forEach(callback);callback默认有三个参数，分别为value(遍历到的数组的数据)，index(对应的索引)，self(数组自身)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(value + <span class="string">&quot;--&quot;</span> + index + <span class="string">&quot;--&quot;</span> + (arr === self));</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印结果为：</span></span><br><span class="line"><span class="comment">// Tom--0--true</span></span><br><span class="line"><span class="comment">// Jack--1--true</span></span><br><span class="line"><span class="comment">// Lucy--2--true</span></span><br><span class="line"><span class="comment">// Lily--3--true</span></span><br><span class="line"><span class="comment">// May--4--true</span></span><br><span class="line"><span class="built_in">console</span>.log(a);     <span class="comment">//undefined---forEach没有返回值</span></span><br><span class="line"><span class="comment">//该方法为遍历方法，不会修改原数组</span></span><br></pre></td></tr></table></figure><h3 id="14、map"><a href="#14、map" class="headerlink" title="14、map()"></a>14、map()</h3><blockquote><p>功能：同forEach功能；map的回调函数会将执行结果返回，最后map将所有回调函数的返回值组成新数组返回。</p></blockquote><p>参数：<code>map(callback)</code>;callback默认有三个参数，分别为<code>value，index，self</code>。跟上面的forEach()的参数一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//功能1：同forEach</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">&quot;--&quot;</span> + index + <span class="string">&quot;--&quot;</span> + (arr === self))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// Jack--1--true</span></span><br><span class="line">    <span class="comment">// Lucy--2--true</span></span><br><span class="line">    <span class="comment">// Lily--3--true</span></span><br><span class="line">    <span class="comment">// May--4--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//功能2：每次回调函数的返回值被map组成新数组返回</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hi:&quot;</span>+value;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(a);     <span class="comment">//[&quot;hi:Tom&quot;, &quot;hi:Jack&quot;, &quot;hi:Lucy&quot;, &quot;hi:Lily&quot;, &quot;hi:May&quot;]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);   <span class="comment">//[&quot;Tom&quot;, &quot;Jack&quot;, &quot;Lucy&quot;, &quot;Lily&quot;, &quot;May&quot;]---原数组未改变</span></span><br></pre></td></tr></table></figure><h3 id="15、filter"><a href="#15、filter" class="headerlink" title="15、filter()"></a>15、filter()</h3><blockquote><p>功能： 1.同forEach功能； 2.<code>filter的回调函数需要返回布尔值，当为true时，将本次数组的数据返回给filter，最后filter将所有回调函数的返回值组成新数组返回（此功能可理解为“过滤”）</code>。</p></blockquote><p>参数：filter(callback);callback默认有三个参数，分别为value，index，self。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//功能1：同forEach</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">&quot;--&quot;</span> + index + <span class="string">&quot;--&quot;</span> + (arr === self))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// Jack--1--true</span></span><br><span class="line">    <span class="comment">// Lucy--2--true</span></span><br><span class="line">    <span class="comment">// Lily--3--true</span></span><br><span class="line">    <span class="comment">// May--4--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//功能2：当回调函数的返回值为true时，本次的数组值返回给filter，被filter组成新数组返回</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(a);         <span class="comment">//[&quot;Jack&quot;, &quot;Lucy&quot;, &quot;Lily&quot;]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);       <span class="comment">//[&quot;Tom&quot;, &quot;Jack&quot;, &quot;Lucy&quot;, &quot;Lily&quot;, &quot;May&quot;]---原数组未改变</span></span><br></pre></td></tr></table></figure><h3 id="16、every"><a href="#16、every" class="headerlink" title="16、every()"></a>16、every()</h3><blockquote><p>功能：<code>判断数组中每一项是否都满足条件，只有所有项都满足条件，才会返回true</code>。</p></blockquote><p>参数：every()接收一个回调函数作为参数，这个回调函数需要有返回值，every(callback);callback默认有三个参数，分别为value，index，self。</p><p>注：1、当回调函数的返回值为true时，类似于forEach的功能，遍历所有；如果为false，那么停止执行，后面的        数据不再遍历，<code>停在第一个返回false的位置</code>。</p><p>​        2、当每个回调函数的返回值都为true时，every的返回值为true，只要有一个回调函数的返回值为false，        every的返回值都为false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">&quot;--&quot;</span> + index + <span class="string">&quot;--&quot;</span> + (arr == self))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">//因为回调函数中没有return true，默认返回undefined，等同于返回false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">&quot;--&quot;</span> + index + <span class="string">&quot;--&quot;</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> value.length &lt; <span class="number">4</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line">    <span class="comment">//因为当遍历到Jack时，回调函数到return返回false，此时Jack已经遍历，但是后面数据就不再被遍历了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo3:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">&quot;--&quot;</span> + index + <span class="string">&quot;--&quot;</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line">    <span class="comment">// Lucy--3--true</span></span><br><span class="line">    <span class="comment">// Lily--4--true</span></span><br><span class="line">    <span class="comment">// May--5--true</span></span><br><span class="line">    <span class="comment">//因为每个回调函数的返回值都是true，那么会遍历数组所有数据，等同于forEach功能</span></span><br></pre></td></tr></table></figure><h3 id="17、some"><a href="#17、some" class="headerlink" title="17、some()"></a>17、some()</h3><blockquote><p>功能：<code>判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true</code>。</p></blockquote><p>参数：some()接收一个回调函数作为参数，这个回调函数需要有返回值，some(callback);callback默认有三个参数，分别为value，index，self。</p><p>功能1：因为要判断数组中的每一项，只要有一个回调函数返回true，some都会返回true，所以与every正好相反，当遇到一个回调函数的返回值为true时，可以确定结果，那么停止执行，后面都数据不再遍历，停在第一个返回true的位置；当回调函数的返回值为false时，需要继续向后执行，到最后才能确定结果，所以会遍历所有数据，实现类似于forEach的功能，遍历所有。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">&quot;--&quot;</span> + index + <span class="string">&quot;--&quot;</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">&quot;--&quot;</span> + index + <span class="string">&quot;--&quot;</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo3:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">&quot;--&quot;</span> + index + <span class="string">&quot;--&quot;</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line">    <span class="comment">// Lucy--3--true</span></span><br><span class="line">    <span class="comment">// Lily--4--true</span></span><br><span class="line">    <span class="comment">// May--5--true</span></span><br></pre></td></tr></table></figure><p>功能2：与every相反，只要有一个回调函数的返回值都为true，some的返回值为true，所有回调函数的返回值为false，some的返回值才为false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(a);             <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;Lily&quot;</span>,<span class="string">&quot;May&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">4</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(a);             <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="三、哪些数组方法会改变原数组"><a href="#三、哪些数组方法会改变原数组" class="headerlink" title="三、哪些数组方法会改变原数组"></a>三、哪些数组方法会改变原数组</h2><p>unshift();</p><p>push()；</p><p>shift();</p><p>pop();</p><p>sort();</p><p>reverse();</p><p>splice();</p><p>这七个数组方法在上面都有过介绍了，可以看出，再用这些方法的时候，原数组是会被改变的。</p><h2 id="四、js数组去重常用方法总结"><a href="#四、js数组去重常用方法总结" class="headerlink" title="四、js数组去重常用方法总结"></a>四、js数组去重常用方法总结</h2><h3 id="1、简单数组去重（IE8以下不支持数组的indexOf-方法）"><a href="#1、简单数组去重（IE8以下不支持数组的indexOf-方法）" class="headerlink" title="1、简单数组去重（IE8以下不支持数组的indexOf()方法）"></a>1、简单数组去重（IE8以下不支持数组的indexOf()方法）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDuplicate</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> temp = []   <span class="comment">//临时数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (temp.indexOf(arr[i]) == -<span class="number">1</span>) &#123;</span><br><span class="line">      temp.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> temp</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">12</span>, <span class="number">87</span>, <span class="number">45</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(isDuplicate(array));  <span class="comment">//[12, 87, 45, 9, 8, 3]</span></span><br></pre></td></tr></table></figure><h3 id="2、数组键值对去重"><a href="#2、数组键值对去重" class="headerlink" title="2、数组键值对去重"></a>2、数组键值对去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;01&#x27;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;02&#x27;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;03&#x27;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;王二&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;04&#x27;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">var</span> result = [], obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj[arr[i].key]) &#123;</span><br><span class="line">    result.push(arr[i])</span><br><span class="line">    obj[arr[i].key] = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ &#123;key: &#x27;01&#x27;,value: &#x27;张三&#x27;&#125;, &#123;key: &#x27;02&#x27;,value: &#x27;李四&#x27;&#125;, &#123;key: &#x27;03&#x27;,value: &#x27;王二&#x27;&#125;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、利用reduce方法遍历数组"><a href="#3、利用reduce方法遍历数组" class="headerlink" title="3、利用reduce方法遍历数组"></a>3、利用reduce方法遍历数组</h3><p>reduce第一个参数是遍历需要执行的函数，第二个参数是item的初始值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;01&#x27;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;02&#x27;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;03&#x27;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;王二&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;04&#x27;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">arr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">item, next</span>) </span>&#123;</span><br><span class="line">  obj[next.key] ? <span class="string">&#x27;&#x27;</span> : obj[next.key] = <span class="literal">true</span> &amp;&amp; item.push(next)</span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// [ &#123;key: &#x27;01&#x27;,value: &#x27;张三&#x27;&#125;, &#123;key: &#x27;02&#x27;,value: &#x27;李四&#x27;&#125;, &#123;key: &#x27;03&#x27;,value: &#x27;王二&#x27;&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="4、利用js的filter方法"><a href="#4、利用js的filter方法" class="headerlink" title="4、利用js的filter方法"></a>4、利用js的filter方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function">(<span class="params">items, index, arry</span>) =&gt;</span> &#123; <span class="comment">//按照条件过滤，返回满足条件的新数组</span></span><br><span class="line">  <span class="keyword">return</span> arry.indexOf(items) === index <span class="comment">//过滤掉下标相同的值</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr) <span class="comment">// [5, 6, 8]</span></span><br></pre></td></tr></table></figure><h3 id="5、利用-ES6的set-方法"><a href="#5、利用-ES6的set-方法" class="headerlink" title="5、利用 ES6的set 方法"></a>5、利用 ES6的set 方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))); <span class="comment">// 利用Array.from将Set结构转换成数组// [5, 6, 8]</span></span><br></pre></td></tr></table></figure><p>[…new Set(array)] 也可以粗暴直接使用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;js数组常用方法&quot;&gt;&lt;a href=&quot;#js数组常用方法&quot; class=&quot;headerlink&quot; title=&quot;js数组常用方法&quot;&gt;&lt;/a&gt;js数组常用方法&lt;/h1&gt;&lt;h2 id=&quot;一、数组常用方法&quot;&gt;&lt;a href=&quot;#一、数组常用方法&quot; class=&quot;head</summary>
      
    
    
    
    <category term="js" scheme="http://example.com/categories/js/"/>
    
    
    <category term="前端技术基础" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>css-css3新增</title>
    <link href="http://example.com/2020/07/30/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-css-CSS3%E6%96%B0%E5%A2%9E/"/>
    <id>http://example.com/2020/07/30/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-css-CSS3%E6%96%B0%E5%A2%9E/</id>
    <published>2020-07-30T10:51:06.000Z</published>
    <updated>2023-03-07T03:13:49.912Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="css">css3新增</a></p><blockquote><p>css3新增的属性大概有以下几类</p><p>1、新增了一些边框属性</p><p>2、新增背景属性</p><p>3、新增了一些文字效果</p><p>4、新增动画效果</p><p>4、新增过渡效果</p></blockquote><h1 id="css3新增边框属性"><a href="#css3新增边框属性" class="headerlink" title="css3新增边框属性"></a>css3新增边框属性</h1><p>border-clolor</p><p>border-image</p><p>border-radius</p><p>box-shadow</p><h1 id="css3新增背景属性"><a href="#css3新增背景属性" class="headerlink" title="css3新增背景属性"></a>css3新增背景属性</h1><p>background-size</p><p>background-origin</p><p>background-clip</p><h1 id="css3新增文字效果"><a href="#css3新增文字效果" class="headerlink" title="css3新增文字效果"></a>css3新增文字效果</h1><ul><li>text-shadow</li><li>word-wrap</li></ul><h1 id="css3新增动画效果"><a href="#css3新增动画效果" class="headerlink" title="css3新增动画效果"></a>css3新增动画效果</h1><p>transform</p><p>animation</p><h1 id="css3新增过渡"><a href="#css3新增过渡" class="headerlink" title="css3新增过渡"></a>css3新增过渡</h1><p>transition</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@&lt;a href=&quot;css&quot;&gt;css3新增&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;css3新增的属性大概有以下几类&lt;/p&gt;
&lt;p&gt;1、新增了一些边框属性&lt;/p&gt;
&lt;p&gt;2、新增背景属性&lt;/p&gt;
&lt;p&gt;3、新增了一些文字效果&lt;/p&gt;
&lt;p&gt;4、新增动画效果&lt;/p&gt;
</summary>
      
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="前端技术基础" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css-css样式优先级</title>
    <link href="http://example.com/2020/07/20/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-css-%E6%A0%B7%E5%BC%8F%E4%BC%98%E5%85%88%E7%BA%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/07/20/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80-css-%E6%A0%B7%E5%BC%8F%E4%BC%98%E5%85%88%E7%BA%A7%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-20T06:21:06.000Z</published>
    <updated>2021-08-16T15:29:10.995Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="css">css样式</a></p><blockquote><p>css的样式大致有一下几种方式可以定义</p><p>1、继承</p><p>2、内联样式：标签内书写</p><p>3、选择器定义样式：选择器又分为ID选择器、类选择器、属性选择器、伪类选择器、标签选择器 = 伪元素选择器</p><p>4、！important</p></blockquote><h1 id="css样式优先级问题"><a href="#css样式优先级问题" class="headerlink" title="css样式优先级问题"></a>css样式优先级问题</h1><h2 id="继承的优先级"><a href="#继承的优先级" class="headerlink" title="继承的优先级"></a>继承的优先级</h2><p>样式的继承是标签中父元素的样式继承给子元素，<strong>离子元素越近层级的父元素的优先级是越高的</strong>。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: green&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此段代码中的子元素颜色为蓝色，但是当子元素拥有自身的直接样式后，继承的优先级是最低的</p><h2 id="内联样式的优先级"><a href="#内联样式的优先级" class="headerlink" title="内联样式的优先级"></a>内联样式的优先级</h2><p>内联样式是写在标签内部的style属性上的，当同一个标签的style属性中同一个样式属性写了多次，此时优先级的顺序是最后写的优先级最高。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: green&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此段代码中的子元素颜色为蓝色，但是当子元素拥有自身的直接样式后，继承的优先级是最低的</p><h2 id="外联样式"><a href="#外联样式" class="headerlink" title="外联样式"></a>外联样式</h2><h3 id="外部样式表的引入"><a href="#外部样式表的引入" class="headerlink" title="外部样式表的引入"></a>外部样式表的引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">url</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在head标签中书写link标签，极力推荐的写法</strong><br>type=“text/css”<br>href=“引入的外部样式表的路径”<br>rel=“stylesheet” 定义与被来链接文档之间的间关系</p><p><strong>在head标签中书写style标签，然后在style标签中书写 @import url(引入外部样式表的路径)；</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">@import url(目标文件的路径以及文件全名名称)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>link和import导入外部样式的区别:</p><ul><li>link属于XHTML标签,而@import完全是CSS提供的一种方式。link标签除了可以加载CSS外，还可以做很多其它的事情，能如定义RSS，定义rel连接属性等，@import就只能加载CSS。</li><li>加载顺序的差别:当一个页面被加载的时候(就是被浏览者浏览的时候)，link引用的CSS会同时被加载，而@import引用的CSS会等到页面全部被下载完再被加载。所以有时候浏览@import加载CSS的页面时开始会没有样式。</li><li>兼容性的差别: @import是CSS2.1提出的，所以老的浏览器不支持，@import只在IE5以上的才能识别，而link标签无此问题。</li><li>使用dom控制样式时的差别:当使用javascript控制dom去改变样式的时候,只能使用link标签，因为@impor不是dom可以控制的</li></ul><h3 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h3><p>css一共有7种基础的选择器：</p><ul><li>ID 选择器， 如 #id{}</li><li>类选择器， 如 .class{}</li><li>属性选择器， 如 a[href=”segmentfault.com”]{}</li><li>伪类选择器， 如 :hover{}</li><li>伪元素选择器， 如 ::before{}</li><li>标签选择器， 如 span{}</li><li>通配选择器， 如 *{}</li></ul><p>这7种选择的优先级分别是<strong>ID 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器</strong>，其中通配选择器的优先级是最低的，一般在全局样式中会给全局样式使用，当然，外部引用的样式的优先级是小于内联样式的优先级的，除非一种情况，那就是在外部样式的书写中给当前当时属性加了！important</p><h3 id="！important"><a href="#！important" class="headerlink" title="！important"></a>！important</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// HTML</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// CSS</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时因为给p标签加了！important，所以即使后面用了类选择器，也是红色的。在所有样式的书写中，一旦用到了！important，此时这个的优先级是最高的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@&lt;a href=&quot;css&quot;&gt;css样式&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;css的样式大致有一下几种方式可以定义&lt;/p&gt;
&lt;p&gt;1、继承&lt;/p&gt;
&lt;p&gt;2、内联样式：标签内书写&lt;/p&gt;
&lt;p&gt;3、选择器定义样式：选择器又分为ID选择器、类选择器、属性选择器、</summary>
      
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="前端技术基础" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
</feed>
